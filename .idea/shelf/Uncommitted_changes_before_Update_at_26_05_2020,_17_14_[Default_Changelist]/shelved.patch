Index: src/source/PlayPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package source;\n\nimport maps.Cell;\nimport maps.Level;\nimport maps.Maps;\nimport objects.blocks.Checkpoint;\nimport objects.blocks.*;\nimport objects.blocks.doors.*;\nimport objects.harmless.Chest;\nimport objects.harmless.Diamond;\nimport objects.harmless.Tumbleweed;\nimport objects.traps.FireTrap;\nimport objects.traps.Rock;\nimport objects.traps.Scorpion;\nimport objects.traps.Snake;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.ArrayList;\n\npublic class PlayPanel extends JPanel implements KeyListener {\n\n    public Boy boy;\n    private JPanel panel;\n    private Maps maps;\n    private boolean stonesAreInited = false;\n\n    private int mapX;\n    private int mapY;\n\n    private int positionOnScreenX;\n    private int positionOnScreenY;\n\n    private int positionOnMapX;\n    private int positionOnMapY;\n\n\n    // map parameters\n    int mapWidth;\n    int mapHeight;\n\n    int panelWidth = 700;\n    int panelHeight = 700;\n\n\n    private boolean mapMovesToRight;\n    private boolean boyMovesToRight;\n\n    private boolean mapMovesToLeft;\n    private boolean boyMovesToLeft;\n\n    private boolean mapMovesUp;\n    private boolean boyMovesUp;\n\n    private boolean mapMovesDown;\n    private boolean boyMovesDown;\n\n\n    private Level currentLevel;\n    private Cell[][] levelMatrix;\n    private int numberOfKeys = 2;\n\n    private Checkpoint currentCheckpoint;\n    private boolean updated = true;\n\n\n    public PlayPanel(Boy boy, int currentLevel) {\n        panel = this;\n        panel.setLayout(null);\n        setPreferredSize(new Dimension(2800, 1540));\n        this.boy = boy;\n        maps = new Maps();\n        initLevel(currentLevel);\n        calculateInitialValuesOfMap();\n        setCoordinates();\n    }\n\n    private void initLevel(int currentLevel) {\n        switch (currentLevel){\n            case 1:\n                this.currentLevel = maps.getLevel1();\n                break;\n            case 2:\n                this.currentLevel = maps.getLevel2();\n                break;\n            case 3:\n                this.currentLevel = maps.getLevel3();\n                break;\n            case 4:\n                this.currentLevel = maps.getLevel4();\n                break;\n            case 5:\n                this.currentLevel = maps.getLevel5();\n                break;\n        }\n        levelMatrix = this.currentLevel.getMatrix();\n    }\n\n    private void calculateInitialValuesOfMap() {\n\n        mapWidth = currentLevel.getMatrix().length* Values.CELL_SIZE;\n        mapHeight = currentLevel.getMatrix()[0].length* Values.CELL_SIZE;\n\n        positionOnScreenX = currentLevel.getPositionOnScreenX();\n        positionOnScreenY = currentLevel.getPositionOnScreenY();\n\n        positionOnMapX = currentLevel.getPositionOnMapX();\n        positionOnMapY = currentLevel.getPositionOnMapY();\n    }\n\n    private void setCoordinates() {\n        mapX = 0 - (Math.abs(positionOnMapX  - positionOnScreenX)* Values.CELL_SIZE);\n        mapY = 0 - (Math.abs(positionOnMapY  - positionOnScreenY)* Values.CELL_SIZE);\n        boy.x = positionOnScreenX* Values.CELL_SIZE;\n        boy.y = positionOnScreenY* Values.CELL_SIZE;\n        boy.xInArray = positionOnMapX;\n        boy.yInArray = positionOnMapY;\n        System.out.println(mapX +\"   \"+mapY);\n        System.out.println(boy.x+\"   \"+boy.y);\n        System.out.println(boy.xInArray+\"   \"+boy.yInArray);\n    }\n\n\n    @Override\n    public void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        panel.removeAll();\n        Graphics2D g2 = (Graphics2D) g;\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n        ArrayList<SecretWall> secretWalls = new ArrayList<>();\n        for (int i = 0; i < levelMatrix.length; i++) {\n            for (int j = 0; j < levelMatrix[i].length; j++) {\n                if(levelMatrix[i][j].getBlock() instanceof SecretWall){\n                    SecretWall secretWall = (SecretWall) levelMatrix[i][j].getBlock();\n                    secretWall.setCoordinates(mapX + i * 70,mapY + j * 70);\n                    secretWalls.add(secretWall);\n                    g2.drawImage(new ImageIcon(\"mapImages/floor.png\").getImage(),\n                            mapX + i * 70, mapY + j * 70,70,70,null);\n                }else{\n                    levelMatrix[i][j].getBlock().paintObject(g2, mapX + i * 70, mapY + j * 70);\n                }\n            }\n        }\n        for (int i = 0; i < levelMatrix.length; i++) {\n            for (int j = 0; j < levelMatrix[i].length; j++) {\n                if (levelMatrix[i][j].getBlock() instanceof PressMechanism.PressPanel){\n                    ((PressMechanism.PressPanel) levelMatrix[i][j].getBlock()).interact(levelMatrix,boy.xInArray,boy.yInArray);\n                }\n                else if (levelMatrix[i][j].getBlock() instanceof DoubleDoor.RightDoor){\n                    ((DoubleDoor.RightDoor) levelMatrix[i][j].getBlock()).interact(boy.xInArray,boy.yInArray);\n                }\n                if (levelMatrix[i][j].getTrapObject() != null) {\n                    if (levelMatrix[i][j].getTrapObject() instanceof Rock){\n                        if (!stonesAreInited) ((Rock)levelMatrix[i][j].getTrapObject()).initVars(this, i, j, mapX, mapY);\n                        if (mapIsMoving()) levelMatrix[i][j].getTrapObject().paintObject(g2, mapX, mapY);\n                        else levelMatrix[i][j].getTrapObject().paintObject(g2);\n                    }else{\n                        JLabel label = levelMatrix[i][j].getTrapObject().getLabel();\n                        if (label.getParent() != panel) {\n                            Dimension size = label.getPreferredSize();\n                            label.setBounds(mapX + i * 70, mapY + j * 70, size.width, size.height);\n                            add(label);\n                        }\n                    }\n                }else if(levelMatrix[i][j].getHarmlessObject() != null) {\n                    if (levelMatrix[i][j].getHarmlessObject() instanceof Diamond) {\n                        if (!stonesAreInited)\n                            ((Diamond)levelMatrix[i][j].getHarmlessObject()).initVars(this, i, j, mapX, mapY);\n                        if (mapIsMoving()) levelMatrix[i][j].getHarmlessObject().paintObject(g2, mapX, mapY);\n                        else levelMatrix[i][j].getHarmlessObject().paintObject(g2);\n                    }\n                    else{\n                        levelMatrix[i][j].getHarmlessObject().paintObject(g2,mapX+ i*70,mapY+j*70);\n                        if (levelMatrix[i][j].getHarmlessObject() instanceof Chest) {\n                            if (((Chest)levelMatrix[i][j].getHarmlessObject()).thingsAreBeeingTaken){\n                                if (((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing != null){\n                                    ((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing.paintObject(g2, mapX+ i*70, mapY+(j-1)*70);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        stonesAreInited = true;\n        g2.drawImage(boy.currentPicture, boy.x, boy.y, boy.width, boy.height, null);\n        for (SecretWall secretWall:secretWalls) {\n            secretWall.paintObject(g2,secretWall.getX(),secretWall.getY());\n        }\n        if (!updated){\n            mapMovesDown = false;\n            updated = true;\n            boy.isMoving = false;\n        }\n    }\n\n    public void applyCheckpoint(){\n        if (currentCheckpoint != null) {\n            boy.isMoving = true;\n            mapMovesDown = true;\n            levelMatrix = currentCheckpoint.getRestoredMatrix(levelMatrix);\n            updated = false;\n            positionOnMapX = currentCheckpoint.positionInArrayX;\n            positionOnMapY = currentCheckpoint.positionInArrayY;\n            positionOnScreenX = currentCheckpoint.minPositionOnScreenX;\n            positionOnScreenY = currentCheckpoint.minPositionOnScreenY;\n            setCoordinates();\n            repaint();\n        }\n    }\n\n    private void setMovementRight() {\n        if ((mapX != 0 && boy.x < 350) || (mapX == 0 || mapX == -(mapWidth - panelWidth))) {\n            boyMovesToRight = true;\n            mapMovesToRight = false;\n        }\n        if (boy.x == 350 && mapX != -(mapWidth - panelWidth)) {\n            boyMovesToRight = false;\n            mapMovesToRight = true;\n        }\n    }\n\n    private void setMovementLeft() {\n        if (mapX == 0 || (boy.x > 280)) {\n            mapMovesToLeft = false;\n            boyMovesToLeft = true;\n        }\n        if (boy.x == 280 && mapX != 0) {\n            mapMovesToLeft = true;\n            boyMovesToLeft = false;\n        }\n    }\n\n    private void setMovementUp() {\n        if ((mapY == 0) || (mapY != 0 && boy.y > 140)) {\n            mapMovesUp = false;\n            boyMovesUp = true;\n        }\n        if (mapY != 0 && boy.y == 140) {\n            mapMovesUp = true;\n            boyMovesUp = false;\n        }\n    }\n\n    private void setMovementDown() {\n        if ((mapY == -(mapHeight - panelHeight)) || (mapY != -(mapHeight - panelHeight) && boy.y < 350)) {\n            mapMovesDown = false;\n            boyMovesDown = true;\n        }\n        if (mapY != -(mapHeight - panelHeight) && boy.y == 350) {\n            mapMovesDown = true;\n            boyMovesDown = false;\n        }\n    }\n\n\n    private void moveMapToRight(){\n        mapX -= Values.CELL_SIZE/7;\n    }\n\n    private void moveMapToLeft(){\n        mapX += Values.CELL_SIZE/7;\n    }\n\n    private void moveMapUp(){\n        mapY += Values.CELL_SIZE/7;\n    }\n\n    private void moveMapDown(){\n        mapY -= Values.CELL_SIZE/7;\n    }\n\n\n\n    public void moveBoy(){\n        Timer t = new Timer(100, null);\n        t.addActionListener(new AbstractAction() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (boy.whatMove == 1 && boyMovesUp) boy.moveUp();\n                else if (boy.whatMove == 1 && mapMovesUp) {\n                    boy.moveUpAnimation();\n                    moveMapUp();\n                }\n                else if (boy.whatMove == 2 && boyMovesDown) boy.moveDown();\n                else if (boy.whatMove == 2 && mapMovesDown) {\n                    boy.moveDownAnimation();\n                    moveMapDown();\n                }\n                else if (boy.whatMove == 3 && boyMovesToLeft) boy.moveLeft();\n                else if (boy.whatMove == 3 && mapMovesToLeft) {\n                    boy.moveLeftAnimation();\n                    moveMapToLeft();\n                }\n                else if (boy.whatMove == 4 && boyMovesToRight) boy.moveRight();\n                else if (boy.whatMove == 4 && mapMovesToRight) {\n                    boy.moveRightAnimation();\n                    moveMapToRight();\n                }\n                else if (boy.whatMove == 5) boy.shoveLeftAndMove();\n                else if (boy.whatMove == 6) boy.shoveLeftAndStand();\n                else if (boy.whatMove == 7) boy.shoveRightAndMove();\n                else if (boy.whatMove == 8) boy.shoveRightAndStand();\n                else if (boy.whatMove == 9) boy.findInChest();\n                else if (boy.whatMove == 10) boy.holdARock();\n                else if (boy.whatMove == 11) boy.attackUp();\n                else if (boy.whatMove == 12) boy.attackDown();\n                else if (boy.whatMove == 13) boy.attackLeft();\n                else if (boy.whatMove == 14) boy.attackRight();\n                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\n                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\n                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\n                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\n                else if(boy.whatMove == 19) boy.moveUpAnimation();\n                else if(boy.whatMove == 20) boy.moveDownAnimation();\n                else if(boy.whatMove == 21) boy.moveLeftAnimation();\n                else if(boy.whatMove == 22) boy.moveRightAnimation();\n                repaint();\n                if (boy.i == 7){\n                    boy.i = 0;\n                    boy.isMoving = false;\n                    System.out.println(boy.xInArray + \", \" + boy.yInArray);\n                    t.stop();\n                    Checkpoint temp = currentCheckpoint;\n                    currentCheckpoint = currentLevel.getCheckpoint(boy.xInArray,boy.yInArray);\n                    if (currentCheckpoint == null)\n                        currentCheckpoint = temp;\n                    else if (!currentCheckpoint.isUsed) {\n                        currentCheckpoint.setUsed(true);\n                        repaint();\n                    }\n                }\n            }\n        });\n        t.start();\n    }\n\n\n    private boolean isAllowedUp(){\n        return boy.y != 0;\n    }\n\n    private boolean isAllowedDown(){\n        return boy.y != panelHeight- boy.height;\n    }\n\n    private boolean isAllowedRight(){\n        return boy.x != panelWidth- boy.width;\n    }\n\n    private boolean isAllowedLeft(){\n        return boy.x != 0;\n    }\n\n    private boolean mapIsMoving(){\n        return (mapMovesUp || mapMovesDown || mapMovesToLeft || mapMovesToRight);\n    }\n\n\n//    private void moveBoy(){\n//        Timer t = new Timer(100, null);\n//        t.addActionListener(new AbstractAction() {\n//            @Override\n//            public void actionPerformed(ActionEvent e) {\n//                if (boy.whatMove == 1) boy.moveUp();\n//                else if (boy.whatMove == 2) boy.moveDown();\n//                else if (boy.whatMove == 3) boy.moveLeft();\n//                else if (boy.whatMove == 4) boy.moveRight();\n//                else if (boy.whatMove == 5) boy.shoveLeftAndMove();\n//                else if (boy.whatMove == 6) boy.shoveLeftAndStand();\n//                else if (boy.whatMove == 7) boy.shoveRightAndMove();\n//                else if (boy.whatMove == 8) boy.shoveRightAndStand();\n//                else if (boy.whatMove == 9) boy.findInChest();\n//                else if (boy.whatMove == 10) boy.holdAStone();\n//                else if (boy.whatMove == 11) boy.attackUp();\n//                else if (boy.whatMove == 12) boy.attackDown();\n//                else if (boy.whatMove == 13) boy.attackLeft();\n//                else if (boy.whatMove == 14) boy.attackRight();\n//                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\n//                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\n//                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\n//                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\n//                repaint();\n//                if (boy.i == 7){\n//                    boy.i = 0;\n//                    boy.isMoving = false;\n//                    t.stop();\n//                }\n//            }\n//        });\n//        t.start();\n//    }\n\n    @Override\n    public void keyTyped(KeyEvent e) {\n\n    }\n\n    @Override\n    public void keyPressed(KeyEvent e) {\n        if (updated && !boy.isMoving) {\n            int code = e.getKeyCode();\n            if (code == KeyEvent.VK_1) {\n                Chest chest = (Chest) levelMatrix[5][16].getHarmlessObject();\n                if (chest != null) {\n                    chest.initVars(this);\n                    boy.whatMove = 9;\n                    boy.isMoving = true;\n                    moveBoy();\n                    chest.openChest();\n                }\n            }\n            else if ((code == KeyEvent.VK_UP) && (boy.isMoving == false) && isAllowedUp()) {\n                Block block = levelMatrix[boy.xInArray][boy.yInArray - 1].getBlock();\n                if ((block.pass() && !(itIsRock(boy.xInArray, boy.yInArray - 1))) || itIsHarmless(boy.xInArray, boy.yInArray - 1)) {\n                    setMovementUp();\n                    boy.whatMove = 1;\n                    boy.isMoving = true;\n                } else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray - 1)) {\n                    boy.whatMove = 19;\n                    boy.isMoving = true;\n                    boy.yInArray++;\n                }\n                moveBoy();\n            }\n            else if ((code == KeyEvent.VK_DOWN) && (boy.isMoving == false) && isAllowedDown()) {\n                Block block = levelMatrix[boy.xInArray][boy.yInArray + 1].getBlock();\n                if ((block.pass() && !(itIsRock(boy.xInArray, boy.yInArray + 1))) || itIsHarmless(boy.xInArray, boy.yInArray + 1)) {\n                    setMovementDown();\n                    boy.whatMove = 2;\n                    boy.isMoving = true;\n                } else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray + 1)) {\n                    boy.whatMove = 20;\n                    boy.isMoving = true;\n                    boy.yInArray--;\n                }\n                moveBoy();\n            }\n            else if ((code == KeyEvent.VK_LEFT) && (boy.isMoving == false) && isAllowedLeft()) {\n                Block block = levelMatrix[boy.xInArray - 1][boy.yInArray].getBlock();\n                if (block instanceof DoorWithKeyhole && numberOfKeys != 0) {\n                    ((DoorWithKeyhole) block).openTheDoor();\n                    numberOfKeys--;\n                    boy.whatMove = 15;\n                    boy.isMoving = true;\n                } else if ((block.pass() && !(itIsRock(boy.xInArray - 1, boy.yInArray))) || itIsHarmless(boy.xInArray - 1, boy.yInArray)) {\n                    setMovementLeft();\n                    boy.whatMove = 3;\n                    //if stone is left boy.whatMove = 5;\n                    //if wall is left boy.whatMove = 6;\n                    boy.isMoving = true;\n                } else if (itIsRock(boy.xInArray - 1, boy.yInArray)) {\n                    boy.whatMove = 5;\n                    boy.isMoving = true;\n                } else if (!block.pass()) {\n                    boy.whatMove = 21;\n                    boy.isMoving = true;\n                    boy.xInArray++;\n                }\n                moveBoy();\n            }\n            else if ((code == KeyEvent.VK_RIGHT) && (boy.isMoving == false) && isAllowedRight()) {\n                Block block = levelMatrix[boy.xInArray + 1][boy.yInArray].getBlock();\n                if (block instanceof DoorWithKeyhole && numberOfKeys != 0) {\n                    ((DoorWithKeyhole) block).openTheDoor();\n                    numberOfKeys--;\n                    boy.whatMove = 16;\n                    boy.isMoving = true;\n                } else if ((block.pass() && !(itIsRock(boy.xInArray + 1, boy.yInArray))) || itIsHarmless(boy.xInArray + 1, boy.yInArray)) {\n                    setMovementRight();\n                    boy.whatMove = 4;\n                    //if stone is left boy.whatMove = 5;\n                    //if wall is left boy.whatMove = 6;\n                    boy.isMoving = true;\n                } else if (itIsRock(boy.xInArray + 1, boy.yInArray)) {\n                    boy.whatMove = 7;\n                    boy.isMoving = true;\n                } else if (!block.pass()) {\n                    boy.whatMove = 22;\n                    boy.isMoving = true;\n                    boy.xInArray--;\n                }\n                moveBoy();\n                //You can test a stone\n            /*Rock rock = (Rock)levelMatrix[4][19].getTrapObject();\n            if (rock != null){\n                rock.whatMove = 1;\n                rock.isMoving = true;\n                rock.moveRock();\n            }*/\n            }\n            else if ((code == KeyEvent.VK_SPACE) && (boy.isMoving == false)) {\n                if (boy.currentPicture == boy.walkUp2) {\n                    boy.whatMove = 11;\n                    if (levelMatrix[boy.xInArray][boy.yInArray - 1].getBlock() instanceof BreakableWall) {\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray - 1].getBlock();\n                        bw.breakWall(levelMatrix, panel);\n                    }\n                } else if (boy.currentPicture == boy.standClear) {\n                    boy.whatMove = 12;\n                    if (levelMatrix[boy.xInArray][boy.yInArray + 1].getBlock() instanceof BreakableWall) {\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray + 1].getBlock();\n                        bw.breakWall(levelMatrix, panel);\n                    }\n                } else if ((boy.currentPicture == boy.standLeft)\n                        || (boy.currentPicture == boy.walkLeft6)) {\n                    boy.whatMove = 13;\n                    if (levelMatrix[boy.xInArray - 1][boy.yInArray].getBlock() instanceof BreakableWall) {\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray - 1][boy.yInArray].getBlock();\n                        bw.breakWall(levelMatrix, panel);\n                    }\n                } else if ((boy.currentPicture == boy.standRight)\n                        || (boy.currentPicture == boy.walkRight6)) {\n                    if (levelMatrix[boy.xInArray + 1][boy.yInArray].getBlock() instanceof BreakableWall) {\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray + 1][boy.yInArray].getBlock();\n                        bw.breakWall(levelMatrix, panel);\n                    }\n                    boy.whatMove = 14;\n                }\n                boy.isMoving = true;\n                moveBoy();\n            }\n        }\n    }\n\n    public boolean itIsHarmless(int x, int y){\n        return (levelMatrix[x][y].getHarmlessObject() != null);\n    }\n\n    public boolean itIsTrap(int x, int y){\n        return (levelMatrix[x][y].getTrapObject() != null);\n    }\n\n    public boolean itIsBlockedDoor(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof BlockedDoor;\n    }\n\n    public boolean itIsDoorWithKeyhole(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof DoorWithKeyhole;\n    }\n\n    public boolean itIsBreakableWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Wall;\n    }\n\n    public boolean itIsFloor(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Floor;\n    }\n\n    public boolean itIsSecretWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof SecretWall;\n    }\n\n    public boolean itIsWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Wall;\n    }\n\n    public boolean itIsChest(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Chest;\n    }\n\n    public boolean itIsDiamond(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Diamond;\n    }\n\n    public boolean itIsTumbleweed(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Tumbleweed;\n    }\n\n    public boolean itIsFireTrap(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof FireTrap;\n    }\n\n    public boolean itIsRock(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Rock;\n    }\n\n    public boolean itIsScrpion(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Scorpion;\n    }\n\n    public boolean itIsSnake(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Snake;\n    }\n\n    @Override\n    public void keyReleased(KeyEvent e) {\n\n    }\n\n    public Level getCurrentLevel() {\n        return currentLevel;\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/source/PlayPanel.java	(revision 3e336131f0de01c6483451774f038b2ebeb6288e)
+++ src/source/PlayPanel.java	(date 1590502260896)
@@ -217,7 +217,7 @@
             boyMovesToRight = true;
             mapMovesToRight = false;
         }
-        if (boy.x == 350 && mapX != -(mapWidth - panelWidth)) {
+        if (boy.x >= 350 && mapX != -(mapWidth - panelWidth)) {
             boyMovesToRight = false;
             mapMovesToRight = true;
         }
@@ -228,7 +228,7 @@
             mapMovesToLeft = false;
             boyMovesToLeft = true;
         }
-        if (boy.x == 280 && mapX != 0) {
+        if (boy.x <= 280 && mapX != 0) {
             mapMovesToLeft = true;
             boyMovesToLeft = false;
         }
@@ -300,7 +300,8 @@
                     boy.moveRightAnimation();
                     moveMapToRight();
                 }
-                else if (boy.whatMove == 5) boy.shoveLeftAndMove();
+                else if (boy.whatMove == 5 && boyMovesToLeft) boy.shoveLeftAndMove();
+                else if (boy.whatMove == 5 && mapMovesToLeft) boy.shoveLeftAndMove();
                 else if (boy.whatMove == 6) boy.shoveLeftAndStand();
                 else if (boy.whatMove == 7) boy.shoveRightAndMove();
                 else if (boy.whatMove == 8) boy.shoveRightAndStand();
@@ -523,6 +524,9 @@
                 boy.isMoving = true;
                 moveBoy();
             }
+            else if (code == KeyEvent.VK_2){
+                applyCheckpoint();
+            }
         }
     }
 
