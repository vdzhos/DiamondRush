Index: src/source/PlayPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package source;\n\nimport maps.Cell;\nimport maps.Level;\nimport maps.Maps;\nimport objects.Stone;\nimport objects.blocks.Checkpoint;\nimport objects.blocks.*;\nimport objects.blocks.doors.*;\nimport objects.harmless.Chest;\nimport objects.harmless.Diamond;\nimport objects.harmless.Tumbleweed;\nimport objects.traps.*;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.ArrayList;\n\npublic class PlayPanel extends JPanel implements KeyListener {\n\n    public Boy boy;\n    private PlayPanel panel;\n    private Maps maps;\n    private boolean stonesAreInited = false;\n    private Timer trapTimer;\n    public Timer takeEnergyTimer;\n\n    private int mapX;\n    private int mapY;\n\n    private int positionOnScreenX;\n    private int positionOnScreenY;\n\n    private int positionOnMapX;\n    private int positionOnMapY;\n\n\n    // map parameters\n    int mapWidth;\n    int mapHeight;\n\n    int panelWidth = Values.GAME_PANEL_WIDTH;\n    int panelHeight = Values.GAME_PANEL_WIDTH;\n\n\n    private boolean mapMovesToRight;\n    private boolean boyMovesToRight;\n\n    private boolean mapMovesToLeft;\n    private boolean boyMovesToLeft;\n\n    private boolean mapMovesUp;\n    private boolean boyMovesUp;\n\n    private boolean mapMovesDown;\n    private boolean boyMovesDown;\n\n    public int revivals;\n\n\n    public Level currentLevel;\n    //levelMatrix was private\n    public Cell[][] levelMatrix;\n\n    private Checkpoint currentCheckpoint;\n    private boolean updated = true;\n    private boolean dead;\n\n    public boolean drawMessage;\n    public boolean twoLineMessage;\n    public String message;\n    public String messageLower;\n    private boolean drawn;\n    private int checkpointCost = 10;\n\n    private int trapDelay = 5000;\n    private int step = 200;\n    private double angleUnit = 360/((trapDelay/step)-2);\n    private double angle = 360+angleUnit;\n\n    public int numberOfRedDiamondsCollected;\n//    these commented fields are in the currentLevel object\n//    private int maxNumberOfRedDiamondsCollected;\n\n    public int numberOfPurpleDiamondsCollected;\n//    private int maxNumberOfPurpleDiamondsCollected;\n\n    public int numberOfGoldKeysCollected;\n//    private int maxNumberOfGoldKeysCollected;\n\n    public int numberOfSilverKeysCollected;\n//    private int maxNumberOfSilverKeysCollected;\n\n    public int currentEnergyLevel;\n\n    private boolean artefactIsCollected;\n    private LevelEndingDialog levelEndingDialog;\n    private DeathDialog deathDialog;\n\n    private boolean boyCanMove = true;\n    private boolean energyIsBeeingTaken  = false;\n    private StatusBarPanel statusBarPanel;\n    private MapPanel mapPanel;\n    private GameFrame gameFrame;\n    private int currentLevelInt;\n    private Font font = Util.getFont(\"fonts/Funhouse-Ke17.ttf\", 16f);\n    private Image image = new ImageIcon(\"mapImages/thoughtClouds.png\").getImage();\n\n    public PlayPanel(int currentLevel) {\n        panel = this;\n        panel.setLayout(null);\n        setPreferredSize(new Dimension(2800, 1540));\n        this.boy = new Boy(0,0);\n        maps = new Maps(this);\n        initLevel();\n        calculateInitialValuesOfMap();\n        setCoordinates();\n    }\n\n    public PlayPanel(int currentLevel, GameFrame gameFrame, MapPanel mapPanel) {\n        this.mapPanel = mapPanel;\n        currentLevelInt = currentLevel;\n        this.gameFrame = gameFrame;\n        panel = this;\n        panel.setLayout(null);\n        setPreferredSize(new Dimension(2800, 1540));\n        this.boy = new Boy(0,0);\n        maps = new Maps(this);\n        maps.initLevel(currentLevel);\n        initLevel();\n        statusBarPanel = new StatusBarPanel(gameFrame, this);\n        initStatusBar();\n        calculateInitialValuesOfMap();\n        setCoordinates();\n        trapTimer = new Timer(step,new Counter());\n        takeEnergy();\n//        levelEndingDialog = new LevelEndingDialog(gameFrame,this);\n    }\n\n    private void initStatusBar() {\n        statusBarPanel.setCurrentLevel(currentLevelInt);\n        statusBarPanel.setMaxNumberOfGoldKeys(currentLevel.getMaxNumberOfGoldKeys());\n        statusBarPanel.setMaxEnergyLevel(currentLevel.getMaxEnergyLevel());\n        statusBarPanel.setMaxNumberOfSilverKeys(currentLevel.getMaxNumberOfSilverKeys());\n        statusBarPanel.setMaxNumberOfPurpleDiamonds(currentLevel.getMaxNumberOfPurpleDiamonds());\n        statusBarPanel.setMaxNumberOfRedDiamonds(currentLevel.getMaxNumberOfRedDiamonds());\n\n        numberOfSilverKeysCollected = 0;\n        numberOfGoldKeysCollected = 0;\n        numberOfRedDiamondsCollected = 0;\n        numberOfPurpleDiamondsCollected = 0;\n        currentEnergyLevel = currentLevel.getMaxEnergyLevel();\n    }\n\n\n    private void initLevel() {\n        currentLevel = maps.getLevel(currentLevelInt);\n        levelMatrix = this.currentLevel.getMatrix();\n    }\n\n    private void calculateInitialValuesOfMap() {\n        mapWidth = currentLevel.getMatrix().length* Values.CELL_SIZE;\n        mapHeight = currentLevel.getMatrix()[0].length* Values.CELL_SIZE;\n\n        positionOnScreenX = currentLevel.getPositionOnScreenX();\n        positionOnScreenY = currentLevel.getPositionOnScreenY();\n\n        positionOnMapX = currentLevel.getPositionOnMapX();\n        positionOnMapY = currentLevel.getPositionOnMapY();\n    }\n\n    private void setCoordinates() {\n        mapX = 0 - (Math.abs(positionOnMapX  - positionOnScreenX)* Values.CELL_SIZE);\n        mapY = 0 - (Math.abs(positionOnMapY  - positionOnScreenY)* Values.CELL_SIZE);\n        boy.x = positionOnScreenX* Values.CELL_SIZE;\n        boy.y = positionOnScreenY* Values.CELL_SIZE;\n        boy.xInArray = positionOnMapX;\n        boy.yInArray = positionOnMapY;\n        System.out.println(mapX +\"   \"+mapY);\n        System.out.println(boy.x+\"   \"+boy.y);\n        System.out.println(boy.xInArray+\"   \"+boy.yInArray);\n    }\n\n    private int n = 0;\n\n    public void restart() {\n//        if (n != 0) {\n//            for (int i = 0; i < levelMatrix.length; i++) {\n//                for (int j = 0; j < levelMatrix[0].length; j++) {\n//                    if (levelMatrix[i][j].getHarmlessObject() instanceof Diamond) {\n//                        ((Diamond) levelMatrix[i][j].getHarmlessObject()).enabled = false;\n//                        ((Diamond) levelMatrix[i][j].getHarmlessObject()).reset();\n//                    }\n//                    if (levelMatrix[i][j].getTrapObject() instanceof Rock) {\n//                        ((Rock) levelMatrix[i][j].getTrapObject()).enabled = false;\n//                        ((Rock) levelMatrix[i][j].getTrapObject()).reset();\n//                    }\n//                    if(levelMatrix[i][j].getTrapObject() instanceof Snake){\n//                        Snake snake = (Snake)levelMatrix[i][j].getTrapObject();\n//                        if(snake.getCheckTimer()!=null){\n//                            snake.getCheckTimer().stop();\n//                            snake.setCheckTimer(null);\n//                        }\n//                        if(snake.getRockCheck()!=null){\n//                            snake.getRockCheck().stop();\n//                            snake.setRockCheck(null);\n//                        }\n//                    }\n//                    if(levelMatrix[i][j].getTrapObject() instanceof FireTrap){\n//                        FireTrap fireTrap = (FireTrap)levelMatrix[i][j].getTrapObject();\n//                        if(fireTrap.getCheckTimer()!=null){\n//                            fireTrap.getCheckTimer().stop();\n//                            fireTrap.setCheckTimer(null);\n//                        }\n//                    }\n//                    if(levelMatrix[i][j].getTrapObject() instanceof Scorpion){\n//                        Scorpion scorpion = (Scorpion)levelMatrix[i][j].getTrapObject();\n//                        if(scorpion.getCheckTimer()!=null){\n//                            scorpion.getCheckTimer().stop();\n//                            scorpion.setCheckTimer(null);\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        n = 1;\n        currentLevel = null;\n        currentCheckpoint = null;\n        stonesAreInited = false;\n        dead = false;\n\n        drawMessage = false;\n        twoLineMessage = false;\n        drawn = false;\n        boy = null;\n        boy = new Boy(0,0);\n\n//        mapX = 0;\n//        mapY = 0;\n\n        boyCanMove = true;\n//\n//        positionOnScreenX = 0;\n//        positionOnScreenY = 0;\n//\n//        positionOnMapX = 0;\n//        positionOnMapY = 0;\n\n//        mapWidth = 0;\n//        mapHeight = 0;\n//\n//        panelWidth = 700;\n//        panelHeight = 700;\n\n        mapMovesToRight = false;\n        boyMovesToRight = false;\n\n        mapMovesToLeft = false;\n        boyMovesToLeft = false;\n\n        mapMovesUp = false;\n        boyMovesUp = false;\n\n        mapMovesDown = false;\n        boyMovesDown = false;\n\n//        levelMatrix = null;\n\n//        updated = true;\n\n        numberOfRedDiamondsCollected = 0;\n\n        numberOfPurpleDiamondsCollected = 0;\n\n        numberOfGoldKeysCollected = 0;\n\n        numberOfSilverKeysCollected = 0;\n\n        revivals = 0;\n\n        artefactIsCollected = artefactIsCollected?true:false;\n        statusBarIsInitiated = false;\n\n        maps.initLevel(currentLevelInt);\n        initLevel();\n        initStatusBar();\n        calculateInitialValuesOfMap();\n        setCoordinates();\n        repaint();\n        if (!takeEnergyTimer.isRunning())\n            takeEnergyTimer.start();\n    }\n\n\n    public void updateStatusBar(){\n        updateNumberOfPurpleDiamondsOnStatusBar();\n        updateEnergyLevelOnStatusBar();\n        updateNumberOfRedDiamondsOnStatusBar();\n        updateNumberOfSilverKeysOnStatusBar();\n        updateNumberOfGoldKeysOnStatusBar();\n    }\n\n\n    public void updateNumberOfRedDiamondsOnStatusBar(){\n        gameFrame.updateNumberOfRedDiamondsOnStatusBar(numberOfRedDiamondsCollected);\n    }\n\n    public void updateNumberOfPurpleDiamondsOnStatusBar(){\n       gameFrame.updateNumberOfPurpleDiamondsOnStatusBar(numberOfPurpleDiamondsCollected);\n    }\n\n    public void updateNumberOfGoldKeysOnStatusBar(){\n        gameFrame.updateNumberOfGoldKeysOnStatusBar(numberOfGoldKeysCollected);\n    }\n\n    public void updateNumberOfSilverKeysOnStatusBar(){\n        gameFrame.updateNumberOfSilverKeysOnStatusBar(numberOfSilverKeysCollected);\n    }\n\n    public void updateEnergyLevelOnStatusBar(){\n        gameFrame.updateEnergyLevelOnStatusBar(currentEnergyLevel);\n    }\n\n    private boolean statusBarIsInitiated;\n\n    @Override\n    public void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        if (!statusBarIsInitiated){\n            updateStatusBar();\n            statusBarIsInitiated = true;\n        }\n        panel.removeAll();\n        Graphics2D g2 = (Graphics2D) g;\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n        ArrayList<SecretWall> secretWalls = new ArrayList<>();\n        for (int i = 0; i < levelMatrix.length; i++) {\n            for (int j = 0; j < levelMatrix[i].length; j++) {\n                if(levelMatrix[i][j].getBlock() instanceof SecretWall){\n                    SecretWall secretWall = (SecretWall) levelMatrix[i][j].getBlock();\n                    secretWall.setCoordinates(mapX + i * 70,mapY + j * 70);\n                    secretWalls.add(secretWall);\n                    g2.drawImage(new ImageIcon(\"mapImages/floor.png\").getImage(),\n                            mapX + i * 70, mapY + j * 70,70,70,null);\n                }else{\n                    levelMatrix[i][j].getBlock().paintObject(g2, mapX + i * 70, mapY + j * 70);\n                }\n            }\n        }\n        for (int i = 0; i < levelMatrix.length; i++) {\n            for (int j = 0; j < levelMatrix[i].length; j++) {\n                if (levelMatrix[i][j].getBlock() instanceof PressMechanism.PressPanel){\n                    ((PressMechanism.PressPanel) levelMatrix[i][j].getBlock()).interact(levelMatrix,boy.xInArray,boy.yInArray);\n                }\n                else if (levelMatrix[i][j].getBlock() instanceof DoubleDoor.RightDoor){\n                    ((DoubleDoor.RightDoor) levelMatrix[i][j].getBlock()).interact(this,boy);\n                }\n                else if (levelMatrix[i][j].getBlock() instanceof DiamondDoor){\n                    ((DiamondDoor) levelMatrix[i][j].getBlock()).setNumberOfDiamonds(numberOfPurpleDiamondsCollected);\n                }\n                if (levelMatrix[i][j].getTrapObject() != null) {\n                    if (levelMatrix[i][j].getTrapObject() instanceof Rock){\n                        if (!stonesAreInited) ((Rock)levelMatrix[i][j].getTrapObject()).initVars(this, i, j, mapX, mapY);\n                        if (mapIsMoving()) levelMatrix[i][j].getTrapObject().paintObject(g2, mapX, mapY);\n                        else levelMatrix[i][j].getTrapObject().paintObject(g2);\n                    }else{\n                        JLabel label = levelMatrix[i][j].getTrapObject().getLabel();\n                        if (label.getParent() != panel) {\n                            Dimension size = label.getPreferredSize();\n                            label.setBounds(mapX + i * 70, mapY + j * 70, size.width, size.height);\n                            add(label);\n                        }\n                    }\n                }if(levelMatrix[i][j].getHarmlessObject() != null) {\n                    if (levelMatrix[i][j].getHarmlessObject() instanceof Diamond) {\n                        if (!stonesAreInited)\n                            ((Diamond)levelMatrix[i][j].getHarmlessObject()).initVars(this, i, j, mapX, mapY);\n                        if (mapIsMoving()) levelMatrix[i][j].getHarmlessObject().paintObject(g2, mapX, mapY);\n                        else levelMatrix[i][j].getHarmlessObject().paintObject(g2);\n                    }\n                    else{\n                        levelMatrix[i][j].getHarmlessObject().paintObject(g2,mapX+ i*70,mapY+j*70);\n                        if (itIsTumbleweed(i, j) && stonesAreInited){\n                            ((Tumbleweed)levelMatrix[i][j].getHarmlessObject()).initVars(this, i, j);\n                        }\n                        if (levelMatrix[i][j].getHarmlessObject() instanceof Chest) {\n                            if (((Chest)levelMatrix[i][j].getHarmlessObject()).thingsAreBeeingTaken){\n                                if (((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing != null){\n                                    ((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing.paintObject(g2, mapX+ i*70, mapY+(j-1)*70);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        stonesAreInited = true;\n        g2.drawImage(boy.currentPicture, boy.x, boy.y, boy.width, boy.height, null);\n        for (SecretWall secretWall:secretWalls) {\n            secretWall.paintObject(g2,secretWall.getX(),secretWall.getY());\n        }\n        if (!updated){\n            mapMovesDown = false;\n            updated = true;\n            boy.isMoving = false;\n        }\n        if (drawMessage && !boy.isMoving) {\n            drawn = true;\n            g2.setFont(font);\n            g2.drawImage(image,boy.x - 60, boy.y - 70, 185, 95,null);\n            g2.setColor(new Color(255, 157, 0));\n            if (twoLineMessage){\n                g2.drawString(message, boy.x - 50, boy.y - 40);\n                g2.drawString(messageLower, boy.x - 50, boy.y - 25);\n            }\n            else g2.drawString(message, boy.x - 50, boy.y - 30);\n        }\n        if (drawMessage&&boy.isMoving&&drawn){\n            drawn = false;\n            drawMessage = false;\n            twoLineMessage = false;\n        }\n        if (boy.gotInTrap){\n            if (!trapTimer.isRunning()){\n                trapTimer.start();\n            }\n            trapCounter(g2);\n        }\n//        JLabel label = levelMatrix[9][16].getTrapObject().getLabel();\n//        System.out.println(boy.x + \" \" + boy.y + \" | \" + label.getX() + \" \" + label.getY());\n    }\n\n\n    private class Counter implements ActionListener{\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            if (angle >0) {\n                if (!boy.isMoving)\n                    PlayPanel.this.repaint();\n                angle -= angleUnit;\n            }\n            else if (angle<=0){\n                trapTimer.stop();\n                angle = 360+angleUnit;\n            }\n        }\n    }\n\n    private void trapCounter(Graphics2D g){\n        Color color = g.getColor();\n        g.setColor(Color.green);\n        g.fillArc(boy.x+boy.width,boy.y+20,40,40,90, (int) angle);\n        g.setColor(color);\n    }\n\n\n    public void applyCheckpoint(){\n        if (currentCheckpoint != null && currentEnergyLevel >= checkpointCost) {\n            revivals ++;\n            boy.isMoving = true;\n            boy.currentPicture = boy.standClear;\n            drawMessage = false;\n            drawn = false;\n            twoLineMessage = false;\n            mapMovesDown = true;\n            stonesAreInited = false;\n            levelMatrix = currentCheckpoint.getRestoredMatrix(levelMatrix);\n            updated = false;\n            positionOnMapX = currentCheckpoint.positionInArrayX;\n            positionOnMapY = currentCheckpoint.positionInArrayY;\n            positionOnScreenX = currentCheckpoint.minPositionOnScreenX;\n            positionOnScreenY = currentCheckpoint.minPositionOnScreenY;\n\n            numberOfGoldKeysCollected -= currentCheckpoint.numberOfGoldKeysOnTheAreaCollected;\n            numberOfSilverKeysCollected -= currentCheckpoint.numberOfSilverKeysOnTheAreaCollected;\n            numberOfPurpleDiamondsCollected -= currentCheckpoint.numberOfPurpleDiamondsOnTheAreaCollected;\n            numberOfRedDiamondsCollected -= currentCheckpoint.numberOfRedDiamondsOnTheAreaCollected;\n            currentEnergyLevel -= checkpointCost;\n            currentEnergyLevel = currentEnergyLevel<0?0:currentEnergyLevel;\n            numberOfGoldKeysCollected = numberOfGoldKeysCollected < 0?0:numberOfGoldKeysCollected;\n            numberOfSilverKeysCollected = numberOfSilverKeysCollected < 0?0:numberOfSilverKeysCollected;\n            setCoordinates();\n            repaint();\n            updateStatusBar();\n//            System.out.println(\"___________________________\");\n//            System.out.println(numberOfGoldKeysCollected);\n//            System.out.println(numberOfSilverKeysCollected);\n//            System.out.println(numberOfPurpleDiamondsCollected);\n//            System.out.println(numberOfRedDiamondsCollected);\n//            System.out.println(\"___________________________\");\n\n        }\n        else if (currentEnergyLevel < checkpointCost){\n            drawMessage = true;\n            twoLineMessage = true;\n            message = \"       Low energy\";\n            messageLower = \"                level!\";\n            drawn = false;\n            repaint();\n        }\n        if(currentEnergyLevel <= 0){\n            dead = true;\n        }\n    }\n\n    private void setMovementRight() {\n        if ((mapX != 0 && boy.x < 350) || (mapX == 0 || mapX == -(mapWidth - panelWidth))) {\n            boyMovesToRight = true;\n            mapMovesToRight = false;\n        }\n        if (boy.x >= 350 && mapX != -(mapWidth - panelWidth)) {\n            boyMovesToRight = false;\n            mapMovesToRight = true;\n        }\n    }\n\n    private void setMovementLeft() {\n        if (mapX == 0 || (boy.x > 280)) {\n            mapMovesToLeft = false;\n            boyMovesToLeft = true;\n        }\n        if (boy.x == 280 && mapX != 0) {\n            mapMovesToLeft = true;\n            boyMovesToLeft = false;\n        }\n    }\n\n    private void setMovementUp() {\n        if ((mapY == 0) || (mapY != 0 && boy.y > 140)) {\n            mapMovesUp = false;\n            boyMovesUp = true;\n        }\n        if (mapY != 0 && boy.y == 140) {\n            mapMovesUp = true;\n            boyMovesUp = false;\n        }\n    }\n\n    private void setMovementDown() {\n        if ((mapY == -(mapHeight - panelHeight)) || (mapY != -(mapHeight - panelHeight) && boy.y < 350)) {\n            mapMovesDown = false;\n            boyMovesDown = true;\n        }\n        if (mapY != -(mapHeight - panelHeight) && boy.y == 350) {\n            mapMovesDown = true;\n            boyMovesDown = false;\n        }\n    }\n\n\n\n    private void moveMapToRight(){\n        mapX -= Values.CELL_SIZE/7;\n    }\n\n    private void moveMapToLeft(){\n        mapX += Values.CELL_SIZE/7;\n    }\n\n    private void moveMapUp(){\n        mapY += Values.CELL_SIZE/7;\n    }\n\n    private void moveMapDown(){\n        mapY -= Values.CELL_SIZE/7;\n    }\n\n\n    public void moveBoy(){\n        Timer t = new Timer(100, null);\n        t.addActionListener(new AbstractAction() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (boy.whatMove == 1 && boyMovesUp) boy.moveUp(PlayPanel.this);\n                else if (boy.whatMove == 1 && mapMovesUp) {\n                    boy.moveUpAnimation(PlayPanel.this,true);\n                    moveMapUp();\n                }\n                else if (boy.whatMove == 2 && boyMovesDown) boy.moveDown(PlayPanel.this);\n                else if (boy.whatMove == 2 && mapMovesDown) {\n                    boy.moveDownAnimation(PlayPanel.this,true);\n                    moveMapDown();\n                }\n                else if (boy.whatMove == 3 && boyMovesToLeft) boy.moveLeft(PlayPanel.this);\n                else if (boy.whatMove == 3 && mapMovesToLeft) {\n                    boy.moveLeftAnimation(PlayPanel.this,true);\n                    moveMapToLeft();\n                }\n                else if (boy.whatMove == 4 && boyMovesToRight) boy.moveRight(PlayPanel.this);\n                else if (boy.whatMove == 4 && mapMovesToRight) {\n                    boy.moveRightAnimation(PlayPanel.this, true);\n                    moveMapToRight();\n                }\n                else if (boy.whatMove == 5 && boyMovesToLeft) boy.shoveLeftAndMove(PlayPanel.this);\n                else if (boy.whatMove == 5 && mapMovesToLeft) {\n                    boy.shoveLeftAndStand(PlayPanel.this, true);\n                    moveMapToLeft();\n                }\n                else if (boy.whatMove == 7 && boyMovesToRight) boy.shoveRightAndMove(PlayPanel.this);\n                else if (boy.whatMove == 7 && mapMovesToRight) {\n                    boy.shoveRightAndStand(PlayPanel.this, true);\n                    moveMapToRight();\n                }\n                else if (boy.whatMove == 6) boy.shoveLeftAndStand(PlayPanel.this, false);\n                else if (boy.whatMove == 8) boy.shoveRightAndStand(PlayPanel.this, false);\n                else if (boy.whatMove == 9) boy.findInChest();\n                else if (boy.whatMove == 10) boy.holdARock();\n                else if (boy.whatMove == 11) boy.attackUp();\n                else if (boy.whatMove == 12) boy.attackDown();\n                else if (boy.whatMove == 13) boy.attackLeft();\n                else if (boy.whatMove == 14) boy.attackRight();\n                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\n                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\n                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\n                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\n                else if(boy.whatMove == 19) boy.moveUpAnimation(PlayPanel.this, false);\n                else if(boy.whatMove == 20) boy.moveDownAnimation(PlayPanel.this, false);\n                else if(boy.whatMove == 21) boy.moveLeftAnimation(PlayPanel.this, false);\n                else if(boy.whatMove == 22) boy.moveRightAnimation(PlayPanel.this, false);\n                else if (boy.whatMove == 23) boy.openChest();\n                if (boy.i == 4) checkHarmless(boy.xInArray, boy.yInArray);\n                repaint();\n                if (boy.i == 7){\n                    boy.i = 0;\n                    if (itIsChest(boy.xInArray, boy.yInArray) && ((Chest) levelMatrix[boy.xInArray][boy.yInArray].getHarmlessObject()).thingsAreBeeingTaken){\n                        boy.isMoving = true;\n                    }\n                    else boy.isMoving = false;\n                    System.out.println(boy.xInArray + \", \" + boy.yInArray);\n                    t.stop();\n//                    if (!energyIsBeeingTaken) takeEnergy();\n                    Checkpoint temp = currentCheckpoint;\n                    currentCheckpoint = currentLevel.getCheckpoint(boy.xInArray,boy.yInArray);\n                    if (currentCheckpoint == null)\n                        currentCheckpoint = temp;\n                    else if (!currentCheckpoint.isUsed) {\n                        currentCheckpoint.setUsed(true);\n                        drawMessage = true;\n                        message = \"New checkpoint!\";\n                        repaint();\n                    }\n                }\n            }\n        });\n        t.start();\n    }\n\n\n\n\n\n    public void takeEnergy(){\n        takeEnergyTimer = new Timer(700, null);\n        takeEnergyTimer.addActionListener(new AbstractAction() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (itIsRock(boy.xInArray, boy.yInArray - 1) && !energyIsBeeingTaken){\n                    energyIsBeeingTaken = true;\n                    if (!boy.isMoving){\n                        boy.currentPicture = boy.imHoldARock;\n                        repaint();\n                    }\n                    System.out.println(\"take energy\");\n                    currentEnergyLevel -= 10;\n                    if (currentEnergyLevel <= 0){\n                        currentEnergyLevel = 0;\n                        //It is death\n                        System.out.println(\"Death!\");\n                        takeEnergyTimer.stop();\n                        pause();\n                        Util.wait(1000, new ActionListener() {\n                            @Override\n                            public void actionPerformed(ActionEvent e) {\n                                endLevel(false);\n                            }\n                        });\n                    }\n                    updateEnergyLevelOnStatusBar();\n                }\n                else if (dead){\n                    takeEnergyTimer.stop();\n                    pause();\n                    Util.wait(1000, new ActionListener() {\n                        @Override\n                        public void actionPerformed(ActionEvent e) {\n                            endLevel(false);\n                        }\n                    });\n                }\n                else{\n                    energyIsBeeingTaken = false;\n//                    takeEnergyTimer.stop();\n                }\n            }\n        });\n        takeEnergyTimer.start();\n    }\n\n    public void takeEnergy(int energy){\n        System.out.println(\"take energy\");\n        currentEnergyLevel -= energy;\n        if (currentEnergyLevel <= 0){\n            currentEnergyLevel = 0;\n            boyCanMove = false;\n            //It is death\n            System.out.println(\"Death!\");\n            takeEnergyTimer.stop();\n            pause();\n            Util.wait(1000, new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    endLevel(false);\n                }\n            });\n        }\n        updateEnergyLevelOnStatusBar();\n    }\n\n    public void pause(){\n        boyCanMove = false;\n        trapTimer.stop();\n        takeEnergyTimer.stop();\n        for (byte i = 0; i < levelMatrix.length; i ++){\n            for (byte j = 0; j < levelMatrix[0].length; j ++){\n                if (levelMatrix[i][j].getTrapObject()!=null){\n                    levelMatrix[i][j].getTrapObject().pause();\n                }\n                else if (levelMatrix[i][j].getHarmlessObject()!=null){\n                    if (itIsDiamond(i, j)) ((Diamond) levelMatrix[i][j].getHarmlessObject()).pause();\n                }\n            }\n        }\n    }\n\n    public void resume(){\n        boyCanMove = true;\n        takeEnergyTimer.start();\n        for (byte i = 0; i < levelMatrix.length; i ++){\n            for (byte j = 0; j < levelMatrix[0].length; j ++){\n                if (levelMatrix[i][j].getTrapObject()!=null){\n                    levelMatrix[i][j].getTrapObject().resume();\n                }\n                if (levelMatrix[i][j].getHarmlessObject() instanceof Diamond){\n                    ((Diamond) levelMatrix[i][j].getHarmlessObject()).resume();\n                }\n            }\n        }\n    }\n\n\n\n//        levelMatrix = currentCheckpoint.getInitialMatrix();\n//\n\n//\n//        calculateInitialValuesOfMap();\n//        setCoordinates();\n\n\n\n    private boolean isAllowedUp(){\n        return boy.y != 0 && boyCanMove;\n    }\n\n    private boolean isAllowedDown(){\n        return boy.y != panelHeight- boy.height && boyCanMove;\n    }\n\n    private boolean isAllowedRight(){\n//        return boy.x != panelWidth- boy.width;\n        return boy.xInArray != levelMatrix.length-1 && boyCanMove;\n    }\n\n    private boolean isAllowedLeft(){\n        return boy.x != 0 && boyCanMove;\n    }\n\n    private boolean mapIsMoving(){\n        return (mapMovesUp || mapMovesDown || mapMovesToLeft || mapMovesToRight);\n    }\n\n\n//    private void moveBoy(){\n//        Timer t = new Timer(100, null);\n//        t.addActionListener(new AbstractAction() {\n//            @Override\n//            public void actionPerformed(ActionEvent e) {\n//                if (boy.whatMove == 1) boy.moveUp();\n//                else if (boy.whatMove == 2) boy.moveDown();\n//                else if (boy.whatMove == 3) boy.moveLeft();\n//                else if (boy.whatMove == 4) boy.moveRight();\n//                else if (boy.whatMove == 5) boy.shoveLeftAndMove();\n//                else if (boy.whatMove == 6) boy.shoveLeftAndStand();\n//                else if (boy.whatMove == 7) boy.shoveRightAndMove();\n//                else if (boy.whatMove == 8) boy.shoveRightAndStand();\n//                else if (boy.whatMove == 9) boy.findInChest();\n//                else if (boy.whatMove == 10) boy.holdAStone();\n//                else if (boy.whatMove == 11) boy.attackUp();\n//                else if (boy.whatMove == 12) boy.attackDown();\n//                else if (boy.whatMove == 13) boy.attackLeft();\n//                else if (boy.whatMove == 14) boy.attackRight();\n//                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\n//                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\n//                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\n//                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\n//                repaint();\n//                if (boy.i == 7){\n//                    boy.i = 0;\n//                    boy.isMoving = false;\n//                    t.stop();\n//                }\n//            }\n//        });\n//        t.start();\n//    }\n\n    @Override\n    public void keyTyped(KeyEvent e) {\n\n    }\n\n    private void endLevel(boolean win){\n        if (win) {\n            pause();\n            if (numberOfPurpleDiamondsCollected == currentLevel.getMaxNumberOfPurpleDiamonds()\n                    && numberOfRedDiamondsCollected == currentLevel.getMaxNumberOfRedDiamonds()\n                    && revivals == 0)\n                artefactIsCollected = true;\n            ProgressStorage.updateContent(currentLevelInt, true, artefactIsCollected);\n            System.out.println(\"currentLevelInt: \" + currentLevelInt + \" artefactIsCollected: \" + artefactIsCollected);\n            gameFrame.updatePuzzlePanel(currentLevelInt, artefactIsCollected);\n            mapPanel.openNextLevel(currentLevelInt);\n            levelEndingDialog = new LevelEndingDialog(gameFrame,this);\n        }\n        else {\n            pause();\n            deathDialog = new DeathDialog(gameFrame,this);\n        }\n    }\n\n    @Override\n    public void keyPressed(KeyEvent e) {\n        if (updated && !boy.isMoving) {\n            int code = e.getKeyCode();\n            if ((code == KeyEvent.VK_1) && (boy.isMoving == false)){\n                if (itIsChest(boy.xInArray, boy.yInArray)){\n                    Chest chest = (Chest) levelMatrix[boy.xInArray][boy.yInArray].getHarmlessObject();\n                    if (chest.isClosed){\n                        chest.initVars(this);\n                        boy.whatMove = 23;\n                        boy.isMoving = true;\n                        moveBoy();\n                        chest.openChest();\n                    }\n                }\n            } else if (code == KeyEvent.VK_2) {\n                applyCheckpoint();\n            } else if ((code == KeyEvent.VK_UP) && (boy.isMoving == false) && isAllowedUp()) {\n                Block block = levelMatrix[boy.xInArray][boy.yInArray - 1].getBlock();\n                if (block.pass()) {\n                    if (!itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray, boy.yInArray - 1) && !itIsRock(boy.xInArray, boy.yInArray - 1)) {\n                        if(itIsFireTrap(boy.xInArray, boy.yInArray - 1)) {\n                            FireTrap fireTrap = (FireTrap) levelMatrix[boy.xInArray][boy.yInArray - 1].getTrapObject();\n                            if (fireTrap.isHead(boy.x)) {\n                                Floor floor = (Floor) block;\n                                floor.setPassable(false);\n                            } else {\n                                levelMatrix[boy.xInArray][boy.yInArray - 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                            }\n                        }else{\n                            levelMatrix[boy.xInArray][boy.yInArray - 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        }\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && !itIsTrap(boy.xInArray, boy.yInArray - 1)) {\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray, boy.yInArray - 1) &&\n                            (!levelMatrix[boy.xInArray][boy.yInArray].getTrapObject().equals(levelMatrix[boy.xInArray][boy.yInArray - 1].getTrapObject()))) {\n                        levelMatrix[boy.xInArray][boy.yInArray - 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    }\n                }\n                if ((block.pass() && !(itIsRock(boy.xInArray, boy.yInArray - 1))) || itIsHarmless(boy.xInArray, boy.yInArray - 1)) {\n                    setMovementUp();\n                    boy.whatMove = 1;\n                    boy.isMoving = true;\n                    if(itIsDiamondDoor(boy.xInArray, boy.yInArray - 1)){\n                        DiamondDoor diamondDoor = (DiamondDoor) levelMatrix[boy.xInArray][ boy.yInArray - 1].getBlock();\n                        if(diamondDoor.isExit()){\n                            boyCanMove=false;\n                            Util.wait(1000, new AbstractAction() {\n                                @Override\n                                public void actionPerformed(ActionEvent e) {\n                                    endLevel(true);\n                                }\n                            });\n                        }\n                    }\n                } else if (itIsRock(boy.xInArray, boy.yInArray - 1)) {\n                    boy.whatMove = 10;\n                    boy.isMoving = true;\n                } else if (!block.pass()) {\n                    boy.whatMove = 19;\n                    boy.isMoving = true;\n                }\n                moveBoy();\n            } else if ((code == KeyEvent.VK_DOWN) && (boy.isMoving == false) && isAllowedDown()) {\n                Block block = levelMatrix[boy.xInArray][boy.yInArray + 1].getBlock();\n                if (block.pass()) {\n                    if (!itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray, boy.yInArray + 1) && !itIsRock(boy.xInArray, boy.yInArray + 1)) {\n                        if(itIsFireTrap(boy.xInArray, boy.yInArray + 1)) {\n                            FireTrap fireTrap = (FireTrap) levelMatrix[boy.xInArray][boy.yInArray + 1].getTrapObject();\n                            if (fireTrap.isHead(boy.x)) {\n                                Floor floor = (Floor) block;\n                                floor.setPassable(false);\n                            } else {\n                                levelMatrix[boy.xInArray][boy.yInArray + 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                            }\n                        }else{\n                            levelMatrix[boy.xInArray][boy.yInArray + 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        }\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && !itIsTrap(boy.xInArray, boy.yInArray + 1)) {\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray, boy.yInArray + 1) &&\n                            (!levelMatrix[boy.xInArray][boy.yInArray].getTrapObject().equals(levelMatrix[boy.xInArray][boy.yInArray + 1].getTrapObject()))) {\n                        levelMatrix[boy.xInArray][boy.yInArray + 1].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    }\n                }\n                if ((block.pass() && !(itIsRock(boy.xInArray, boy.yInArray + 1))) || itIsHarmless(boy.xInArray, boy.yInArray + 1)) {\n                    setMovementDown();\n                    boy.whatMove = 2;\n                    boy.isMoving = true;\n                    if(itIsDiamondDoor(boy.xInArray, boy.yInArray + 1)){\n                        DiamondDoor diamondDoor = (DiamondDoor) levelMatrix[boy.xInArray][ boy.yInArray + 1].getBlock();\n                        if(diamondDoor.isExit()){\n                            boyCanMove=false;\n                            Util.wait(1000, new AbstractAction() {\n                                @Override\n                                public void actionPerformed(ActionEvent e) {\n                                    endLevel(true);\n                                }\n                            });\n                        }\n                    }\n                } else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray + 1)) {\n                    boy.whatMove = 20;\n                    boy.isMoving = true;\n                }\n                moveBoy();\n            } else if ((code == KeyEvent.VK_LEFT) && (boy.isMoving == false) && isAllowedLeft()) {\n                Rock possibleRock = null;\n                Block block = levelMatrix[boy.xInArray - 1][boy.yInArray].getBlock();\n                if (block instanceof DoorWithKeyhole.GoldDoor && !block.pass()) {\n                    if (numberOfGoldKeysCollected != 0) {\n                        ((DoorWithKeyhole.GoldDoor) block).openTheDoor();\n                        numberOfGoldKeysCollected--;\n                        updateNumberOfGoldKeysOnStatusBar();\n                        boy.whatMove = 15;\n                        boy.isMoving = true;\n                    } else if (numberOfGoldKeysCollected == 0){\n                        drawMessage = true;\n                        drawn = false;\n                        twoLineMessage = true;\n                        message = \"    I need to find\";\n                        messageLower = \"    a gold key!\";\n                        boy.whatMove = 21;\n                        boy.isMoving = true;\n                    }\n                } else if (block instanceof DoorWithKeyhole.SilverDoor && !block.pass()) {\n                    if (numberOfSilverKeysCollected != 0) {\n                        ((DoorWithKeyhole.SilverDoor) block).openTheDoor();\n                        numberOfSilverKeysCollected--;\n                        updateNumberOfSilverKeysOnStatusBar();\n                        boy.whatMove = 17;\n                        boy.isMoving = true;\n                    }\n                    else if (numberOfSilverKeysCollected == 0){\n                        drawMessage = true;\n                        drawn = false;\n                        twoLineMessage = true;\n                        message = \"    I need to find\";\n                        messageLower = \"    a silver key!\";\n                        boy.whatMove = 21;\n                        boy.isMoving = true;\n                    }\n                }\n                else if ((block.pass() && !(itIsRock(boy.xInArray - 1, boy.yInArray))) || itIsHarmless(boy.xInArray - 1, boy.yInArray)) {\n                    //Newly added\n                    if (rockLeftIsFallingDown()){\n                            boy.whatMove = 6;\n                            boy.isMoving = true;\n                    }\n                    else{\n                        setMovementLeft();\n                        boy.whatMove = 3;\n                        boy.isMoving = true;\n                        if(itIsDiamondDoor(boy.xInArray-1, boy.yInArray)){\n                            DiamondDoor diamondDoor = (DiamondDoor) levelMatrix[boy.xInArray-1][ boy.yInArray].getBlock();\n                            if(diamondDoor.isExit()){\n                                boyCanMove=false;\n                                Util.wait(1000, new AbstractAction() {\n                                    @Override\n                                    public void actionPerformed(ActionEvent e) {\n                                        endLevel(true);\n                                    }\n                                });\n                            }\n                        }\n                    }\n                } else if (itIsRock(boy.xInArray - 1, boy.yInArray)) {\n                    Rock rock = (Rock) levelMatrix[boy.xInArray - 1][boy.yInArray].getTrapObject();\n                    if (itIsClearForStone(boy.xInArray - 2, boy.yInArray) && rockCheckForSnakes(boy.xInArray - 2, boy.yInArray,rock)) {\n                        possibleRock = rock;\n                        if (rock.whatMove != 2 && rock.whatMove != 3 && rock.whatMove != 4){\n                            setMovementLeft();\n                            boy.whatMove = 5;\n                            boy.isMoving = true;\n                            rock.whatMove = 5;\n                            rock.isMoving = true;\n                            rock.moveStone();\n                        }\n                        else{\n                            boy.whatMove = 6;\n                            boy.isMoving = true;\n                        }\n                    }\n                    else{\n                        boy.whatMove = 6;\n                        boy.isMoving = true;\n                    }\n                } else if (!block.pass()) {\n                    if (block instanceof DiamondDoor) {\n                            drawMessage = true;\n                            drawn = false;\n                            twoLineMessage = true;\n                            message = \"    I need more \";\n                            messageLower = \"purple diamonds!\";\n                    }\n                    boy.whatMove = 21;\n                    boy.isMoving = true;\n                }\n                if (block.pass()) {\n                    if (!itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray - 1, boy.yInArray) && !itIsRock(boy.xInArray - 1, boy.yInArray)) {\n                        if(itIsFireTrap(boy.xInArray-1, boy.yInArray)) {\n                            FireTrap fireTrap = (FireTrap) levelMatrix[boy.xInArray-1][boy.yInArray].getTrapObject();\n                            if (fireTrap.isHead(boy.x)) {\n                                Floor floor = (Floor) block;\n                                floor.setPassable(false);\n                            } else {\n                                levelMatrix[boy.xInArray-1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                            }\n                        }else{\n                            levelMatrix[boy.xInArray-1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        }\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && !itIsTrap(boy.xInArray - 1, boy.yInArray)) {\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray - 1, boy.yInArray) &&\n                            (!levelMatrix[boy.xInArray][boy.yInArray].getTrapObject().equals(levelMatrix[boy.xInArray - 1][boy.yInArray].getTrapObject()))) {\n                        levelMatrix[boy.xInArray - 1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    }\n//                    if(possibleRock!=null && possibleRock.snake!=null){\n//                        possibleRock.snake.checkTimerStart(this,boy,levelMatrix);\n//                    }\n                }\n                moveBoy();\n            }\n            else if ((code == KeyEvent.VK_RIGHT) && (boy.isMoving == false) && isAllowedRight()) {\n                Rock possibleRock = null;\n                Block block = levelMatrix[boy.xInArray + 1][boy.yInArray].getBlock();\n                if (block instanceof DoorWithKeyhole.GoldDoor && !block.pass()) {\n                    if (numberOfGoldKeysCollected != 0){\n                        ((DoorWithKeyhole.GoldDoor) block).openTheDoor();\n                        numberOfGoldKeysCollected--;\n                        updateNumberOfGoldKeysOnStatusBar();\n                        boy.whatMove = 16;\n                        boy.isMoving = true;\n                    }\n                    else if (numberOfGoldKeysCollected == 0) {\n                        boy.whatMove = 22;\n                        boy.isMoving = true;\n                        drawn = false;\n                        drawMessage = true;\n                        twoLineMessage = true;\n                        message = \"    I need to find\";\n                        messageLower = \"    a gold key!\";\n                    }\n                }\n                else if (block instanceof DoorWithKeyhole.SilverDoor && !block.pass()) {\n                    if (numberOfSilverKeysCollected != 0) {\n                        ((DoorWithKeyhole.SilverDoor) block).openTheDoor();\n                        numberOfSilverKeysCollected--;\n                        updateNumberOfSilverKeysOnStatusBar();\n                        boy.whatMove = 18;\n                        boy.isMoving = true;\n                    }\n                    else if (numberOfSilverKeysCollected == 0){\n                        boy.whatMove = 22;\n                        boy.isMoving = true;\n                        drawn = false;\n                        drawMessage = true;\n                        twoLineMessage = true;\n                        message = \"    I need to find\";\n                        messageLower = \"    a silver key!\";\n                    }\n                }\n                else if ((block.pass() && !(itIsRock(boy.xInArray + 1, boy.yInArray))) || itIsHarmless(boy.xInArray + 1, boy.yInArray)) {\n                    //Newly added\n                    if (rockRightIsFallingDown()){\n                            boy.whatMove = 8;\n                            boy.isMoving = true;\n                    }\n                    else{\n                        setMovementRight();\n                        boy.whatMove = 4;\n                        boy.isMoving = true;\n                        if(itIsDiamondDoor(boy.xInArray+1, boy.yInArray)){\n                            DiamondDoor diamondDoor = (DiamondDoor) levelMatrix[boy.xInArray+1][ boy.yInArray].getBlock();\n                            if(diamondDoor.isExit()){\n                                boyCanMove=false;\n                                Util.wait(1000, new AbstractAction() {\n                                    @Override\n                                    public void actionPerformed(ActionEvent e) {\n                                        endLevel(true);\n                                    }\n                                });\n                            }\n                        }\n                    }\n                } else if (itIsRock(boy.xInArray + 1, boy.yInArray)) {\n                    Rock rock = (Rock) levelMatrix[boy.xInArray + 1][boy.yInArray].getTrapObject();\n                    if (itIsClearForStone(boy.xInArray + 2, boy.yInArray) && rockCheckForSnakes(boy.xInArray + 2, boy.yInArray,rock)) {\n                        possibleRock = rock;\n                        if (rock.whatMove != 2 && rock.whatMove != 3 && rock.whatMove != 4){\n                            setMovementRight();\n                            boy.whatMove = 7;\n                            boy.isMoving = true;\n                            rock.whatMove = 6;\n                            rock.isMoving = true;\n                            rock.moveStone();\n                        }\n                        else{\n                            boy.whatMove = 8;\n                            boy.isMoving = true;\n                        }\n                    }\n                    else {\n                        boy.whatMove = 8;\n                        boy.isMoving = true;\n                    }\n                } else if (!block.pass()) {\n                    if (block instanceof DiamondDoor) {\n                        drawMessage = true;\n                        drawn = false;\n                        twoLineMessage = true;\n                        message = \"    I need more \";\n                        messageLower = \"purple diamonds!\";\n                    }\n                    boy.whatMove = 22;\n                    boy.isMoving = true;\n                }\n                if (block.pass()) {\n                    if (!itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray + 1, boy.yInArray) && !itIsRock(boy.xInArray + 1, boy.yInArray)) {\n                        if(itIsFireTrap(boy.xInArray+1, boy.yInArray)) {\n                            FireTrap fireTrap = (FireTrap) levelMatrix[boy.xInArray+1][boy.yInArray].getTrapObject();\n                            if (fireTrap.isHead(boy.x)) {\n                                Floor floor = (Floor) block;\n                                floor.setPassable(false);\n                            } else {\n                                levelMatrix[boy.xInArray+1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                            }\n                        }else{\n                            levelMatrix[boy.xInArray+1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        }\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && !itIsTrap(boy.xInArray + 1, boy.yInArray)) {\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    } else if (itIsTrap(boy.xInArray, boy.yInArray) && itIsTrap(boy.xInArray + 1, boy.yInArray) &&\n                            (!levelMatrix[boy.xInArray][boy.yInArray].getTrapObject().equals(levelMatrix[boy.xInArray + 1][boy.yInArray].getTrapObject()))) {\n                        levelMatrix[boy.xInArray + 1][boy.yInArray].getTrapObject().checkTimerStart(this, boy, levelMatrix);\n                        finishTrapCheckTimer(boy.xInArray, boy.yInArray);\n                    }\n//                    if(possibleRock!=null && possibleRock.snake!=null){\n//                        possibleRock.snake.checkTimerStart(this,boy,levelMatrix);\n//                    }\n                }\n                moveBoy();\n            }\n            else if ((code == KeyEvent.VK_SPACE) && (boy.isMoving == false)) {\n                if (boy.currentPicture == boy.walkUp2){\n                    boy.whatMove = 11;\n                    if(levelMatrix[boy.xInArray][boy.yInArray-1].getBlock() instanceof BreakableWall){\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray-1].getBlock();\n                        bw.breakWall(levelMatrix,this);\n                    }\n                } else if (boy.currentPicture == boy.standClear){\n                    boy.whatMove = 12;\n                    if(levelMatrix[boy.xInArray][boy.yInArray+1].getBlock() instanceof BreakableWall){\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray+1].getBlock();\n                        bw.breakWall(levelMatrix,this);\n                    }\n                }else if ((boy.currentPicture == boy.standLeft)\n                        || (boy.currentPicture == boy.walkLeft6)){\n                    boy.whatMove = 13;\n                    if(levelMatrix[boy.xInArray-1][boy.yInArray].getBlock() instanceof BreakableWall){\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray-1][boy.yInArray].getBlock();\n                        bw.breakWall(levelMatrix,this);\n                    }\n                }else if ((boy.currentPicture == boy.standRight)\n                        || (boy.currentPicture == boy.walkRight6)){\n                    if(levelMatrix[boy.xInArray+1][boy.yInArray].getBlock() instanceof BreakableWall){\n                        BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray+1][boy.yInArray].getBlock();\n                        bw.breakWall(levelMatrix,this);\n                    }\n                    boy.whatMove = 14;\n                }\n                boy.isMoving = true;\n                moveBoy();\n            }\n        }\n    }\n\n    private boolean rockLeftIsFallingDown(){\n        if (itIsRock(boy.xInArray - 1, boy.yInArray - 1)) {\n            Rock rock = (Rock) levelMatrix[boy.xInArray - 1][boy.yInArray - 1].getTrapObject();\n            if (rock.isMoving && rock.whatMove == 4 && rock.i <= 3){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean rockRightIsFallingDown(){\n        if (itIsRock(boy.xInArray + 1, boy.yInArray - 1)) {\n            Rock rock = (Rock) levelMatrix[boy.xInArray + 1][boy.yInArray - 1].getTrapObject();\n            if (rock.isMoving && rock.whatMove == 4 && rock.i <= 3){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean rockCheckForSnakes(int xInArray, int yInArray, Rock rock){\n        if(itIsSnake(xInArray,yInArray)){\n            Snake snake = (Snake) levelMatrix[xInArray][yInArray].getTrapObject();\n            Rectangle snakeRect = new Rectangle(snake.x+snake.getLabel().getX(),snake.y+snake.getLabel().getY(),70,70);\n            Rectangle rockRect = new Rectangle(rock.x+(xInArray-rock.xInArray)*70,rock.y,70,70);\n            if(rockRect.intersects(snakeRect)){\n                System.out.println(xInArray-rock.xInArray +\" \"+ false);\n                return false;\n            }else{\n                System.out.println(xInArray-rock.xInArray+\" \"+ true);\n                return true;\n            }\n        }\n        System.out.println(xInArray-rock.xInArray+\" \"+ true);\n        return true;\n    }\n\n    public void disappearFromCell(int x, int y){\n        if (x != levelMatrix.length-1) {\n            if (itIsStone(x, y - 1)) {\n                getStone(x, y - 1).checkSpace();\n            }\n            if (itIsStone(x - 1, y)) {\n                getStone(x - 1, y).checkSpace();\n            }\n            if (itIsStone(x + 1, y)) {\n                getStone(x + 1, y).checkSpace();\n            }\n            if (itIsStone(x - 1, y - 1)){\n                getStone(x - 1, y - 1).checkSpace();\n            }\n            if (itIsStone(x + 1, y - 1)){\n                getStone(x + 1, y - 1).checkSpace();\n            }\n        }\n    }\n\n    public void checkHarmless(int x, int y){\n        if (itIsDiamond(x, y)) ((Diamond)levelMatrix[x][y].getHarmlessObject()).disappear();\n        else if (itIsTumbleweed(x, y)) ((Tumbleweed)levelMatrix[x][y].getHarmlessObject()).disappear();\n    }\n\n    public boolean itIsClearForStone(int x, int y){\n        if (boy.xInArray == x && boy.yInArray == y) return false;\n        if (itIsStone(x, y)) return false;\n        if(itIsTumbleweed(x,y) || itIsChest(x,y)) return false;\n        if (itIsTrap(x, y)) return true;\n        return (!itIsHarmless(x, y)\n                && (itIsFloor(x, y) || itIsSecretWall(x, y)\n                || itIsPressPanel(x, y) || itIsCheckpoint(x, y)));\n    }\n\n    public boolean itIsHarmless ( int x, int y){\n        return (levelMatrix[x][y].getHarmlessObject() != null);\n    }\n\n    public boolean itIsTrap ( int x, int y){\n        return (levelMatrix[x][y].getTrapObject() != null);\n    }\n\n    public boolean itIsStone(int x, int y){\n        if (!itIsTrap(x, y) && !itIsHarmless(x, y)) return false;\n        return (itIsRock(x, y) || itIsDiamond(x, y));\n    }\n\n    public Stone getStone(int x, int y){\n        if (itIsStone(x, y)){\n            if (itIsRock(x, y)) return (Stone)levelMatrix[x][y].getTrapObject();\n            else return (Stone)levelMatrix[x][y].getHarmlessObject();\n        }\n        else return null;\n    }\n\n    public boolean itIsBlockedDoor(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof BlockedDoor;\n    }\n\n    public boolean itIsDoorWithKeyhole(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof DoorWithKeyhole;\n    }\n\n    public boolean itIsPressPanel(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof PressMechanism.PressPanel;\n    }\n\n    public boolean itIsBreakableWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Wall;\n    }\n\n    public boolean itIsCheckpoint(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Checkpoint;\n    }\n\n    public boolean itIsFloor(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Floor ||levelMatrix[x][y].getBlock() instanceof PressMechanism.PressPanel;\n    }\n\n    public boolean itIsSecretWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof SecretWall;\n    }\n\n    public boolean itIsDiamondDoor(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof DiamondDoor;\n    }\n\n    public boolean itIsWall(int x, int y){\n        if (levelMatrix[x][y].getBlock() == null) return false;\n        return levelMatrix[x][y].getBlock() instanceof Wall;\n    }\n\n    public boolean itIsChest(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Chest;\n    }\n\n    public boolean itIsDiamond(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Diamond;\n    }\n\n    public boolean itIsTumbleweed(int x, int y){\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\n        return levelMatrix[x][y].getHarmlessObject() instanceof Tumbleweed;\n    }\n\n    public boolean itIsFireTrap(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof FireTrap;\n    }\n\n    public boolean itIsRock(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Rock;\n    }\n\n    public boolean itIsScorpion(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Scorpion;\n    }\n\n    public boolean itIsSnake(int x, int y){\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\n        return levelMatrix[x][y].getTrapObject() instanceof Snake;\n    }\n\n\n    private void finishTrapCheckTimer(int x, int y){\n        new java.util.Timer().schedule(\n                new java.util.TimerTask() {\n                    @Override\n                    public void run() {\n                        System.out.println(\"finished\");\n                        if(itIsSnake(x,y)){\n                            Snake snake = (Snake)levelMatrix[x][y].getTrapObject();\n                            if(snake.getCheckTimer()!= null && snake.getCheckTimer().isRunning()){\n                                snake.getCheckTimer().stop();\n                            }\n                        }else if(itIsScorpion(x,y)){\n                            Scorpion scorpion = (Scorpion)levelMatrix[x][y].getTrapObject();\n                            if(scorpion.getCheckTimer()!= null && scorpion.getCheckTimer().isRunning()){\n                                scorpion.getCheckTimer().stop();\n                            }\n                        }else if(itIsFireTrap(x,y)){\n                            FireTrap fireTrap = (FireTrap)levelMatrix[x][y].getTrapObject();\n                            if(fireTrap.getCheckTimer()!= null && fireTrap.getCheckTimer().isRunning()){\n                                fireTrap.getCheckTimer().stop();\n                            }\n                        }\n                    }\n                },\n                1000\n        );\n    }\n\n\n    @Override\n    public void keyReleased (KeyEvent e){\n\n    }\n\n    public Level getCurrentLevel() {\n        return currentLevel;\n    }\n\n    public StatusBarPanel getStatusBarPanel() {\n        return statusBarPanel;\n    }\n\n    public void setBoyCanMove(boolean boyCanMove) {\n        this.boyCanMove = boyCanMove;\n    }\n\n    public int getCurrentLevelInt() {\n        return currentLevelInt;\n    }\n\n    public int getMapX() {\n        return mapX;\n    }\n\n    public int getMapY() {\n        return mapY;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/source/PlayPanel.java	(revision e4f0c193f15e636de03f9237b484eb2297523e88)
+++ src/source/PlayPanel.java	(date 1591173428796)
@@ -185,7 +185,7 @@
         System.out.println(boy.xInArray+"   "+boy.yInArray);
     }
 
-    private int n = 0;
+//    private int n = 0;
 
     public void restart() {
 //        if (n != 0) {
