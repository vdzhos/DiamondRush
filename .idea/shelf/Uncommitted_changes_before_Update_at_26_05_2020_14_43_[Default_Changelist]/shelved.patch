Index: src/source/Boy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package source;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class Boy {\r\n\r\n    int x;\r\n    int y;\r\n    int xInArray;\r\n    int yInArray;\r\n    int width;\r\n    int height;\r\n    int cellSide = Values.CELL_SIZE;\r\n    public int whatMove = 0; //Stand = 0; Up = 1; Down = 2; Left = 3; Right = 4;\r\n    //shoveLeftAndMove = 5; shoveLeftAndStand = 6; shoveRightAndMove = 7; shoveRightAndStand = 8;\r\n    //findInChest = 9; holdARock = 10;\r\n    //attackLeft = 11; attackRight = 12; attackLeft = 13; attackRight = 14;\r\n    //openWithGoldKeyLeft = 15; openWithGoldKeyRight = 16; openWithSilverKeyLeft = 17; openWithSilverKeyRight = 18;\r\n    public boolean isMoving = false;\r\n    int i = 0;\r\n\r\n    Image standLeft = new ImageIcon(\"boy/standLeft.png\").getImage();\r\n    Image standRight = new ImageIcon(\"boy/standRight.png\").getImage();\r\n    Image standClear = new ImageIcon(\"boy/standClear.png\").getImage();\r\n\r\n    Image walkUp0 = new ImageIcon(\"boy/walkUp0.png\").getImage();\r\n    Image walkUp1 = new ImageIcon(\"boy/walkUp1.png\").getImage();\r\n    Image walkUp2 = new ImageIcon(\"boy/walkUp2.png\").getImage();\r\n    Image[] arrayUp = {walkUp0, walkUp0, walkUp1, walkUp1,\r\n            walkUp0, walkUp0, walkUp2};\r\n\r\n    Image walkDown0 = new ImageIcon(\"boy/walkDown0.png\").getImage();\r\n    Image[] arrayDown = {walkDown0, walkDown0, standRight, standRight,\r\n            walkDown0, walkDown0, standClear};\r\n\r\n    Image walkLeft0 = new ImageIcon(\"boy/walkLeft0.png\").getImage();\r\n    Image walkLeft1 = new ImageIcon(\"boy/walkLeft1.png\").getImage();\r\n    Image walkLeft2 = new ImageIcon(\"boy/walkLeft2.png\").getImage();\r\n    Image walkLeft3 = new ImageIcon(\"boy/walkLeft3.png\").getImage();\r\n    Image walkLeft4 = new ImageIcon(\"boy/walkLeft4.png\").getImage();\r\n    Image walkLeft5 = new ImageIcon(\"boy/walkLeft5.png\").getImage();\r\n    Image walkLeft6 = new ImageIcon(\"boy/walkLeft6.png\").getImage();\r\n    Image[] arrayLeft = {walkLeft0, walkLeft1, walkLeft2, walkLeft3,\r\n            walkLeft4, walkLeft5, walkLeft6};\r\n\r\n    Image walkRight0 = new ImageIcon(\"boy/walkRight0.png\").getImage();\r\n    Image walkRight1 = new ImageIcon(\"boy/walkRight1.png\").getImage();\r\n    Image walkRight2 = new ImageIcon(\"boy/walkRight2.png\").getImage();\r\n    Image walkRight3 = new ImageIcon(\"boy/walkRight3.png\").getImage();\r\n    Image walkRight4 = new ImageIcon(\"boy/walkRight4.png\").getImage();\r\n    Image walkRight5 = new ImageIcon(\"boy/walkRight5.png\").getImage();\r\n    Image walkRight6 = new ImageIcon(\"boy/walkRight6.png\").getImage();\r\n    Image[] arrayRight = {walkRight0, walkRight1, walkRight2, walkRight3,\r\n            walkRight4, walkRight5, walkRight6};\r\n\r\n    Image shoveLeft = new ImageIcon(\"boy/shoveLeft.png\").getImage();\r\n    Image shoveRight = new ImageIcon(\"boy/shoveRight.png\").getImage();\r\n    Image[] arrayShoveLeft = {shoveLeft, shoveLeft, shoveLeft, standRight, shoveLeft,\r\n            shoveLeft, standLeft};\r\n    Image[] arrayShoveRight = {shoveRight, shoveRight, shoveRight, standRight,\r\n            shoveRight, shoveRight, standRight};\r\n\r\n    Image lookInChest = new ImageIcon(\"boy/lookInChest.png\").getImage();\r\n    Image cheer = new ImageIcon(\"boy/cheer.png\").getImage();\r\n    Image[] arrayFindInChest = {lookInChest, lookInChest, lookInChest, cheer, cheer, cheer, cheer};\r\n    //Question about stand clear\r\n\r\n    Image imHoldARock = new ImageIcon(\"boy/holdARock.png\").getImage();\r\n\r\n    Image attackUp = new ImageIcon(\"boy/attackUp.png\").getImage();\r\n    Image[] arrayAttackUp = {walkUp2, attackUp, attackUp, attackUp, attackUp, attackUp, walkUp2};\r\n\r\n    Image attackRight1 = new ImageIcon(\"boy/attackRight1.png\").getImage();\r\n    Image attackDown = new ImageIcon(\"boy/attackDown.png\").getImage();\r\n    Image[] arrayAttackDown = {attackRight1, attackRight1, attackDown, attackDown, attackDown, attackRight1, standClear};\r\n\r\n    Image attackLeft0 = new ImageIcon(\"boy/attackLeft0.png\").getImage();\r\n    Image attackLeft1 = new ImageIcon(\"boy/attackLeft1.png\").getImage();\r\n    Image attackLeft2 = new ImageIcon(\"boy/attackLeft2.png\").getImage();\r\n    Image[] arrayAttackLeft = {attackLeft0, attackLeft0, attackLeft1, attackLeft1,\r\n            attackLeft2, attackLeft2, standLeft};\r\n\r\n    Image attackRight0 = new ImageIcon(\"boy/attackRight0.png\").getImage();\r\n    Image attackRight2 = new ImageIcon(\"boy/attackRight2.png\").getImage();\r\n    Image[] arrayAttackRight = {attackRight0, attackRight0, attackRight1, attackRight1,\r\n            attackRight2, attackRight2, standRight};\r\n\r\n    Image holdGoldKeyLeft = new ImageIcon(\"boy/holdGoldKeyLeft.png\").getImage();\r\n    Image[] arrayOpenWithGoldKeyLeft = {holdGoldKeyLeft, holdGoldKeyLeft,\r\n            holdGoldKeyLeft, holdGoldKeyLeft, cheer, cheer, standLeft};\r\n\r\n    Image holdGoldKeyRight = new ImageIcon(\"boy/holdGoldKeyRight.png\").getImage();\r\n    Image[] arrayOpenWithGoldKeyRight = {holdGoldKeyRight, holdGoldKeyRight,\r\n            holdGoldKeyRight, holdGoldKeyRight, cheer, cheer, standRight};\r\n\r\n    Image holdSilverKeyLeft = new ImageIcon(\"boy/holdSilverKeyLeft.png\").getImage();\r\n    Image[] arrayOpenWithSilverKeyLeft = {holdSilverKeyLeft, holdSilverKeyLeft,\r\n            holdSilverKeyLeft, holdSilverKeyLeft, cheer, cheer, standLeft};\r\n\r\n    Image holdSilverKeyRight = new ImageIcon(\"boy/holdSilverKeyRight.png\").getImage();\r\n    Image[] arrayOpenWithSilverKeyRight = {holdSilverKeyRight, holdSilverKeyRight,\r\n            holdSilverKeyRight, holdSilverKeyRight, cheer, cheer, standRight};\r\n\r\n    Image currentPicture = standClear;\r\n\r\n    public Boy(int x, int y){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = 70;\r\n        this.height = 70;\r\n    }\r\n\r\n    public void moveUp() {\r\n        if (i == 3) yInArray --;\r\n        y -= cellSide / 7;\r\n        currentPicture = arrayUp[i];\r\n        i++;\r\n    }\r\n    public void moveUpAnimation() {\r\n        if (i == 3) yInArray --;\r\n        currentPicture = arrayUp[i];\r\n        i++;\r\n    }\r\n\r\n    public void moveDown() {\r\n        if (i == 3) yInArray ++;\r\n        y += cellSide / 7;\r\n        currentPicture = arrayDown[i];\r\n        i++;\r\n    }\r\n\r\n    public void moveDownAnimation() {\r\n        if (i == 3) yInArray ++;\r\n        currentPicture = arrayDown[i];\r\n        i++;\r\n    }\r\n\r\n    public void moveLeft() {\r\n        if (i == 3) xInArray --;\r\n        x -= cellSide / 7;\r\n        currentPicture = arrayLeft[i];\r\n        i++;\r\n    }\r\n    public void moveLeftAnimation() {\r\n        if (i == 3) xInArray --;\r\n        currentPicture = arrayLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void moveRight() {\r\n        if (i == 3) xInArray ++;\r\n        x += cellSide / 7;\r\n        currentPicture = arrayRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void moveRightAnimation() {\r\n        if (i == 3) xInArray ++;\r\n        currentPicture = arrayRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void shoveLeftAndMove(){\r\n        if (i == 3) xInArray --;\r\n        x -= cellSide / 7;\r\n        currentPicture = arrayShoveLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void shoveLeftAndStand(){\r\n        currentPicture = arrayShoveLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void shoveRightAndMove(){\r\n        if (i == 3) xInArray ++;\r\n        x += cellSide / 7;\r\n        currentPicture = arrayShoveRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void shoveRightAndStand(){\r\n        currentPicture = arrayShoveRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void findInChest(){\r\n        currentPicture = arrayFindInChest[i];\r\n        i++;\r\n    }\r\n\r\n    public void holdARock(){\r\n        currentPicture = imHoldARock;\r\n        i++;\r\n    }\r\n\r\n    public void attackUp(){\r\n        currentPicture = arrayAttackUp[i];\r\n        i++;\r\n    }\r\n\r\n    public void attackDown(){\r\n        currentPicture = arrayAttackDown[i];\r\n        i++;\r\n    }\r\n\r\n    public void attackLeft(){\r\n        currentPicture = arrayAttackLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void attackRight(){\r\n        currentPicture = arrayAttackRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void openWithGoldKeyLeft(){\r\n        currentPicture = arrayOpenWithGoldKeyLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void openWithGoldKeyRight(){\r\n        currentPicture = arrayOpenWithGoldKeyRight[i];\r\n        i++;\r\n    }\r\n\r\n    public void openWithSilverKeyLeft(){\r\n        currentPicture = arrayOpenWithSilverKeyLeft[i];\r\n        i++;\r\n    }\r\n\r\n    public void openWithSilverKeyRight(){\r\n        currentPicture = arrayOpenWithSilverKeyRight[i];\r\n        i++;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/source/Boy.java	(revision 6033ba49874cf017494b7781317c46b6c9565d96)
+++ src/source/Boy.java	(date 1590485377953)
@@ -17,6 +17,7 @@
     //findInChest = 9; holdARock = 10;
     //attackLeft = 11; attackRight = 12; attackLeft = 13; attackRight = 14;
     //openWithGoldKeyLeft = 15; openWithGoldKeyRight = 16; openWithSilverKeyLeft = 17; openWithSilverKeyRight = 18;
+    //UpAnimation = 19; DownAnimation = 20; LeftAnimation = 21; RightAnimation = 22;
     public boolean isMoving = false;
     int i = 0;
 
Index: src/source/PlayPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package source;\r\n\r\nimport maps.Cell;\r\nimport maps.Level;\r\nimport maps.Maps;\r\nimport objects.blocks.*;\r\nimport objects.blocks.doors.*;\r\nimport objects.harmless.Chest;\r\nimport objects.harmless.Diamond;\r\nimport objects.harmless.Harmless;\r\nimport objects.harmless.Tumbleweed;\r\nimport objects.traps.FireTrap;\r\nimport objects.traps.Rock;\r\nimport objects.traps.Scorpion;\r\nimport objects.traps.Snake;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.ArrayList;\r\n\r\npublic class PlayPanel extends JPanel implements KeyListener {\r\n\r\n    public Boy boy;\r\n    private JPanel panel;\r\n    private Maps maps;\r\n    private boolean stonesAreInited = false;\r\n\r\n    private int mapX;\r\n    private int mapY;\r\n\r\n    private int positionOnScreenX;\r\n    private int positionOnScreenY;\r\n\r\n    private int positionOnMapX;\r\n    private int positionOnMapY;\r\n\r\n\r\n    // map parameters\r\n    int mapWidth;\r\n    int mapHeight;\r\n\r\n    int panelWidth = 700;\r\n    int panelHeight = 700;\r\n\r\n\r\n    private boolean mapMovesToRight;\r\n    private boolean boyMovesToRight;\r\n\r\n    private boolean mapMovesToLeft;\r\n    private boolean boyMovesToLeft;\r\n\r\n    private boolean mapMovesUp;\r\n    private boolean boyMovesUp;\r\n\r\n    private boolean mapMovesDown;\r\n    private boolean boyMovesDown;\r\n\r\n\r\n    private Level currentLevel;\r\n    private Cell[][] levelMatrix;\r\n    private int numberOfKeys = 2;\r\n\r\n\r\n\r\n    public PlayPanel(Boy boy, int currentLevel) {\r\n        panel = this;\r\n        panel.setLayout(null);\r\n        setPreferredSize(new Dimension(2800, 1540));\r\n        this.boy = boy;\r\n        maps = new Maps();\r\n        initLevel(currentLevel);\r\n        calculateInitialValuesOfMap();\r\n    }\r\n\r\n    private void initLevel(int currentLevel) {\r\n        switch (currentLevel){\r\n            case 1:\r\n                this.currentLevel = maps.getLevel1();\r\n                break;\r\n            case 2:\r\n                this.currentLevel = maps.getLevel2();\r\n                break;\r\n            case 3:\r\n                this.currentLevel = maps.getLevel3();\r\n                break;\r\n            case 4:\r\n                this.currentLevel = maps.getLevel4();\r\n                break;\r\n            case 5:\r\n                this.currentLevel = maps.getLevel5();\r\n                break;\r\n        }\r\n        levelMatrix = this.currentLevel.getMatrix();\r\n    }\r\n\r\n    private void calculateInitialValuesOfMap() {\r\n\r\n        mapWidth = currentLevel.getMatrix().length* Values.CELL_SIZE;\r\n        mapHeight = currentLevel.getMatrix()[0].length* Values.CELL_SIZE;\r\n\r\n        positionOnScreenX = currentLevel.getPositionOnScreenX();\r\n        positionOnScreenY = currentLevel.getPositionOnScreenY();\r\n\r\n        positionOnMapX = currentLevel.getPositionOnMapX();\r\n        positionOnMapY = currentLevel.getPositionOnMapY();\r\n        mapX = 0;\r\n        mapY = 0 - ((positionOnMapY  - positionOnScreenY)* Values.CELL_SIZE);\r\n\r\n        boy.x = positionOnScreenX* Values.CELL_SIZE;\r\n        boy.y = positionOnScreenY* Values.CELL_SIZE;\r\n        boy.xInArray = positionOnMapX;\r\n        boy.yInArray = positionOnMapY;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        panel.removeAll();\r\n        Graphics2D g2 = (Graphics2D) g;\r\n        ArrayList<SecretWall> secretWalls = new ArrayList<>();\r\n        for (int i = 0; i < levelMatrix.length; i++) {\r\n            for (int j = 0; j < levelMatrix[i].length; j++) {\r\n                if(levelMatrix[i][j].getBlock() instanceof SecretWall){\r\n                    SecretWall secretWall = (SecretWall) levelMatrix[i][j].getBlock();\r\n                    secretWall.setCoordinates(mapX + i * 70,mapY + j * 70);\r\n                    secretWalls.add(secretWall);\r\n                    g2.drawImage(new ImageIcon(\"mapImages/floor.png\").getImage(),\r\n                            mapX + i * 70, mapY + j * 70,70,70,null);\r\n                }else{\r\n                    levelMatrix[i][j].getBlock().paintObject(g2, mapX + i * 70, mapY + j * 70);\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < levelMatrix.length; i++) {\r\n            for (int j = 0; j < levelMatrix[i].length; j++) {\r\n                if (levelMatrix[i][j].getBlock() instanceof PressMechanism.PressPanel){\r\n                    ((PressMechanism.PressPanel) levelMatrix[i][j].getBlock()).interact(levelMatrix,boy.xInArray,boy.yInArray);\r\n                }\r\n                else if (levelMatrix[i][j].getBlock() instanceof DoubleDoor.RightDoor){\r\n                    ((DoubleDoor.RightDoor) levelMatrix[i][j].getBlock()).interact(boy.xInArray,boy.yInArray);\r\n                }\r\n                if (levelMatrix[i][j].getTrapObject() != null) {\r\n                    if (levelMatrix[i][j].getTrapObject() instanceof Rock){\r\n                        if (!stonesAreInited) ((Rock)levelMatrix[i][j].getTrapObject()).initVars(this, i, j, mapX, mapY);\r\n                        if (mapIsMoving()) levelMatrix[i][j].getTrapObject().paintObject(g2, mapX, mapY);\r\n                        else levelMatrix[i][j].getTrapObject().paintObject(g2);\r\n                    }else{\r\n                        JLabel label = levelMatrix[i][j].getTrapObject().getLabel();\r\n                        if (label.getParent() != panel) {\r\n                            Dimension size = label.getPreferredSize();\r\n                            label.setBounds(mapX + i * 70, mapY + j * 70, size.width, size.height);\r\n                            add(label);\r\n                        }\r\n                    }\r\n                }else if(levelMatrix[i][j].getHarmlessObject() != null) {\r\n                    if (levelMatrix[i][j].getHarmlessObject() instanceof Diamond) {\r\n                        if (!stonesAreInited)\r\n                            ((Diamond)levelMatrix[i][j].getHarmlessObject()).initVars(this, i, j, mapX, mapY);\r\n                        if (mapIsMoving()) levelMatrix[i][j].getHarmlessObject().paintObject(g2, mapX, mapY);\r\n                        else levelMatrix[i][j].getHarmlessObject().paintObject(g2);\r\n                    }\r\n                    else{\r\n                        levelMatrix[i][j].getHarmlessObject().paintObject(g2,mapX+ i*70,mapY+j*70);\r\n                        if (levelMatrix[i][j].getHarmlessObject() instanceof Chest) {\r\n                            if (((Chest)levelMatrix[i][j].getHarmlessObject()).thingsAreBeeingTaken){\r\n                                if (((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing != null){\r\n                                    ((Chest)levelMatrix[i][j].getHarmlessObject()).currentThing.paintObject(g2, mapX+ i*70, mapY+(j-1)*70);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        stonesAreInited = true;\r\n        g2.drawImage(boy.currentPicture, boy.x, boy.y, boy.width, boy.height, null);\r\n        for (SecretWall secretWall:secretWalls) {\r\n            secretWall.paintObject(g2,secretWall.getX(),secretWall.getY());\r\n        }\r\n    }\r\n\r\n\r\n    private void setMovementRight() {\r\n        if ((mapX != 0 && boy.x < 350) || (mapX == 0 || mapX == -(mapWidth - panelWidth))) {\r\n            boyMovesToRight = true;\r\n            mapMovesToRight = false;\r\n        }\r\n        if (boy.x == 350 && mapX != -(mapWidth - panelWidth)) {\r\n            boyMovesToRight = false;\r\n            mapMovesToRight = true;\r\n        }\r\n    }\r\n\r\n    private void setMovementLeft() {\r\n        if (mapX == 0 || (boy.x > 280)) {\r\n            mapMovesToLeft = false;\r\n            boyMovesToLeft = true;\r\n        }\r\n        if (boy.x == 280 && mapX != 0) {\r\n            mapMovesToLeft = true;\r\n            boyMovesToLeft = false;\r\n        }\r\n    }\r\n\r\n    private void setMovementUp() {\r\n        if ((mapY == 0) || (mapY != 0 && boy.y > 140)) {\r\n            mapMovesUp = false;\r\n            boyMovesUp = true;\r\n        }\r\n        if (mapY != 0 && boy.y == 140) {\r\n            mapMovesUp = true;\r\n            boyMovesUp = false;\r\n        }\r\n    }\r\n\r\n    private void setMovementDown() {\r\n        if ((mapY == -(mapHeight - panelHeight)) || (mapY != -(mapHeight - panelHeight) && boy.y < 350)) {\r\n            mapMovesDown = false;\r\n            boyMovesDown = true;\r\n        }\r\n        if (mapY != -(mapHeight - panelHeight) && boy.y == 350) {\r\n            mapMovesDown = true;\r\n            boyMovesDown = false;\r\n        }\r\n    }\r\n\r\n\r\n    private void moveMapToRight(){\r\n        mapX -= Values.CELL_SIZE/7;\r\n    }\r\n\r\n    private void moveMapToLeft(){\r\n        mapX += Values.CELL_SIZE/7;\r\n    }\r\n\r\n    private void moveMapUp(){\r\n        mapY += Values.CELL_SIZE/7;\r\n    }\r\n\r\n    private void moveMapDown(){\r\n        mapY -= Values.CELL_SIZE/7;\r\n    }\r\n\r\n\r\n\r\n    public void moveBoy(){\r\n        Timer t = new Timer(100, null);\r\n        t.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (boy.whatMove == 1 && boyMovesUp) boy.moveUp();\r\n                else if (boy.whatMove == 1 && mapMovesUp) {\r\n                    boy.moveUpAnimation();\r\n                    moveMapUp();\r\n                }\r\n                else if (boy.whatMove == 2 && boyMovesDown) boy.moveDown();\r\n                else if (boy.whatMove == 2 && mapMovesDown) {\r\n                    boy.moveDownAnimation();\r\n                    moveMapDown();\r\n                }\r\n                else if (boy.whatMove == 3 && boyMovesToLeft) boy.moveLeft();\r\n                else if (boy.whatMove == 3 && mapMovesToLeft) {\r\n                    boy.moveLeftAnimation();\r\n                    moveMapToLeft();\r\n                }\r\n                else if (boy.whatMove == 4 && boyMovesToRight) boy.moveRight();\r\n                else if (boy.whatMove == 4 && mapMovesToRight) {\r\n                    boy.moveRightAnimation();\r\n                    moveMapToRight();\r\n                }\r\n                else if (boy.whatMove == 5) boy.shoveLeftAndMove();\r\n                else if (boy.whatMove == 6) boy.shoveLeftAndStand();\r\n                else if (boy.whatMove == 7) boy.shoveRightAndMove();\r\n                else if (boy.whatMove == 8) boy.shoveRightAndStand();\r\n                else if (boy.whatMove == 9) boy.findInChest();\r\n                else if (boy.whatMove == 10) boy.holdARock();\r\n                else if (boy.whatMove == 11) boy.attackUp();\r\n                else if (boy.whatMove == 12) boy.attackDown();\r\n                else if (boy.whatMove == 13) boy.attackLeft();\r\n                else if (boy.whatMove == 14) boy.attackRight();\r\n                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\r\n                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\r\n                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\r\n                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\r\n                else if(boy.whatMove == 19) boy.moveUpAnimation();\r\n                else if(boy.whatMove == 20) boy.moveDownAnimation();\r\n                else if(boy.whatMove == 21) boy.moveLeftAnimation();\r\n                else if(boy.whatMove == 22) boy.moveRightAnimation();\r\n                repaint();\r\n                if (boy.i == 7){\r\n                    boy.i = 0;\r\n                    boy.isMoving = false;\r\n                    System.out.println(boy.xInArray + \", \" + boy.yInArray);\r\n                    t.stop();\r\n                }\r\n            }\r\n        });\r\n        t.start();\r\n    }\r\n\r\n\r\n    private boolean isAllowedUp(){\r\n        return boy.y != 0;\r\n    }\r\n\r\n    private boolean isAllowedDown(){\r\n        return boy.y != panelHeight- boy.height;\r\n    }\r\n\r\n    private boolean isAllowedRight(){\r\n        return boy.x != panelWidth- boy.width;\r\n    }\r\n\r\n    private boolean isAllowedLeft(){\r\n        return boy.x != 0;\r\n    }\r\n\r\n    private boolean mapIsMoving(){\r\n        return (mapMovesUp || mapMovesDown || mapMovesToLeft || mapMovesToRight);\r\n    }\r\n\r\n\r\n//    private void moveBoy(){\r\n//        Timer t = new Timer(100, null);\r\n//        t.addActionListener(new AbstractAction() {\r\n//            @Override\r\n//            public void actionPerformed(ActionEvent e) {\r\n//                if (boy.whatMove == 1) boy.moveUp();\r\n//                else if (boy.whatMove == 2) boy.moveDown();\r\n//                else if (boy.whatMove == 3) boy.moveLeft();\r\n//                else if (boy.whatMove == 4) boy.moveRight();\r\n//                else if (boy.whatMove == 5) boy.shoveLeftAndMove();\r\n//                else if (boy.whatMove == 6) boy.shoveLeftAndStand();\r\n//                else if (boy.whatMove == 7) boy.shoveRightAndMove();\r\n//                else if (boy.whatMove == 8) boy.shoveRightAndStand();\r\n//                else if (boy.whatMove == 9) boy.findInChest();\r\n//                else if (boy.whatMove == 10) boy.holdAStone();\r\n//                else if (boy.whatMove == 11) boy.attackUp();\r\n//                else if (boy.whatMove == 12) boy.attackDown();\r\n//                else if (boy.whatMove == 13) boy.attackLeft();\r\n//                else if (boy.whatMove == 14) boy.attackRight();\r\n//                else if (boy.whatMove == 15) boy.openWithGoldKeyLeft();\r\n//                else if (boy.whatMove == 16) boy.openWithGoldKeyRight();\r\n//                else if (boy.whatMove == 17) boy.openWithSilverKeyLeft();\r\n//                else if (boy.whatMove == 18) boy.openWithSilverKeyRight();\r\n//                repaint();\r\n//                if (boy.i == 7){\r\n//                    boy.i = 0;\r\n//                    boy.isMoving = false;\r\n//                    t.stop();\r\n//                }\r\n//            }\r\n//        });\r\n//        t.start();\r\n//    }\r\n\r\n    @Override\r\n    public void keyTyped(KeyEvent e) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void keyPressed(KeyEvent e) {\r\n        //You can test a chest\r\n        if (e.getKeyCode() == KeyEvent.VK_1){\r\n            Chest chest = (Chest)levelMatrix[5][16].getHarmlessObject();\r\n            if (chest != null){\r\n                chest.initVars(this);\r\n                boy.whatMove = 9;\r\n                boy.isMoving = true;\r\n                moveBoy();\r\n                chest.openChest();\r\n            }\r\n        }\r\n        if ((e.getKeyCode() == KeyEvent.VK_UP) && (boy.isMoving == false) && isAllowedUp()) {\r\n            Block block = levelMatrix[boy.xInArray][boy.yInArray-1].getBlock();\r\n            if ((block.pass()&&!(itIsRock(boy.xInArray, boy.yInArray-1)))||itIsHarmless(boy.xInArray, boy.yInArray-1)){\r\n                setMovementUp();\r\n                boy.whatMove = 1;\r\n                boy.isMoving = true;\r\n            }else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray-1)){\r\n                boy.whatMove = 19;\r\n                boy.isMoving = true;\r\n                boy.yInArray++;\r\n            }\r\n            moveBoy();\r\n        }\r\n        if ((e.getKeyCode() == KeyEvent.VK_DOWN) && (boy.isMoving == false) && isAllowedDown()) {\r\n            Block block = levelMatrix[boy.xInArray][boy.yInArray+1].getBlock();\r\n           if ((block.pass()&&!(itIsRock(boy.xInArray, boy.yInArray+1)))||itIsHarmless(boy.xInArray, boy.yInArray+1)){\r\n                setMovementDown();\r\n                boy.whatMove = 2;\r\n                boy.isMoving = true;\r\n           }else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray+1)){\r\n                boy.whatMove = 20;\r\n                boy.isMoving = true;\r\n                boy.yInArray--;\r\n           }\r\n            moveBoy();\r\n        }\r\n        if ((e.getKeyCode() == KeyEvent.VK_LEFT) && (boy.isMoving == false) && isAllowedLeft()) {\r\n            Block block = levelMatrix[boy.xInArray-1][boy.yInArray].getBlock();\r\n            if (block instanceof DoorWithKeyhole && numberOfKeys != 0){\r\n                ((DoorWithKeyhole) block).openTheDoor();\r\n                numberOfKeys --;\r\n                boy.whatMove = 15;\r\n                boy.isMoving = true;\r\n            }\r\n            else if ((block.pass()&&!(itIsRock(boy.xInArray - 1, boy.yInArray)))||itIsHarmless(boy.xInArray - 1, boy.yInArray)){\r\n                setMovementLeft();\r\n                boy.whatMove = 3;\r\n                //if stone is left boy.whatMove = 5;\r\n                //if wall is left boy.whatMove = 6;\r\n                boy.isMoving = true;\r\n            }\r\n            else if (itIsRock(boy.xInArray - 1, boy.yInArray)){\r\n                boy.whatMove = 5;\r\n                boy.isMoving = true;\r\n            }\r\n            else if (!block.pass()){\r\n                boy.whatMove = 21;\r\n                boy.isMoving = true;\r\n                boy.xInArray++;\r\n            }\r\n            moveBoy();\r\n        }\r\n        if ((e.getKeyCode() == KeyEvent.VK_RIGHT) && (boy.isMoving == false) && isAllowedRight()) {\r\n            Block block = levelMatrix[boy.xInArray+1][boy.yInArray].getBlock();\r\n            if (block instanceof DoorWithKeyhole && numberOfKeys != 0){\r\n                ((DoorWithKeyhole) block).openTheDoor();\r\n                numberOfKeys --;\r\n                boy.whatMove = 16;\r\n                boy.isMoving = true;\r\n            }\r\n            else if ((block.pass()&&!(itIsRock(boy.xInArray + 1, boy.yInArray)))||itIsHarmless(boy.xInArray + 1, boy.yInArray)){\r\n                setMovementRight();\r\n                boy.whatMove = 4;\r\n                //if stone is left boy.whatMove = 5;\r\n                //if wall is left boy.whatMove = 6;\r\n                boy.isMoving = true;\r\n            }\r\n            else if (itIsRock(boy.xInArray + 1, boy.yInArray)){\r\n                boy.whatMove = 7;\r\n                boy.isMoving = true;\r\n            }\r\n            else if (!block.pass()){\r\n                boy.whatMove = 22;\r\n                boy.isMoving = true;\r\n                boy.xInArray--;\r\n            }\r\n            moveBoy();\r\n            //You can test a stone\r\n            /*Rock rock = (Rock)levelMatrix[4][19].getTrapObject();\r\n            if (rock != null){\r\n                rock.whatMove = 1;\r\n                rock.isMoving = true;\r\n                rock.moveRock();\r\n            }*/\r\n        }\r\n        if ((e.getKeyCode() == KeyEvent.VK_SPACE) && (boy.isMoving == false)) {\r\n            if (boy.currentPicture == boy.walkUp2){\r\n                boy.whatMove = 11;\r\n                if(levelMatrix[boy.xInArray][boy.yInArray-1].getBlock() instanceof BreakableWall){\r\n                    BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray-1].getBlock();\r\n                    bw.breakWall(levelMatrix,panel);\r\n                }\r\n            } else if (boy.currentPicture == boy.standClear){\r\n                boy.whatMove = 12;\r\n                if(levelMatrix[boy.xInArray][boy.yInArray+1].getBlock() instanceof BreakableWall){\r\n                    BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray][boy.yInArray+1].getBlock();\r\n                    bw.breakWall(levelMatrix,panel);\r\n                }\r\n            }else if ((boy.currentPicture == boy.standLeft)\r\n                    || (boy.currentPicture == boy.walkLeft6)){\r\n                boy.whatMove = 13;\r\n                if(levelMatrix[boy.xInArray-1][boy.yInArray].getBlock() instanceof BreakableWall){\r\n                    BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray-1][boy.yInArray].getBlock();\r\n                    bw.breakWall(levelMatrix,panel);\r\n                }\r\n            }else if ((boy.currentPicture == boy.standRight)\r\n                    || (boy.currentPicture == boy.walkRight6)){\r\n                if(levelMatrix[boy.xInArray+1][boy.yInArray].getBlock() instanceof BreakableWall){\r\n                    BreakableWall bw = (BreakableWall) levelMatrix[boy.xInArray+1][boy.yInArray].getBlock();\r\n                    bw.breakWall(levelMatrix,panel);\r\n                }\r\n                boy.whatMove = 14;\r\n            }\r\n            boy.isMoving = true;\r\n            moveBoy();\r\n        }\r\n    }\r\n\r\n    public boolean itIsHarmless(int x, int y){\r\n        return (levelMatrix[x][y].getHarmlessObject() != null);\r\n    }\r\n\r\n    public boolean itIsTrap(int x, int y){\r\n        return (levelMatrix[x][y].getTrapObject() != null);\r\n    }\r\n\r\n    public boolean itIsBlockedDoor(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof BlockedDoor;\r\n    }\r\n\r\n    public boolean itIsDoorWithKeyhole(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof DoorWithKeyhole;\r\n    }\r\n\r\n    public boolean itIsBreakableWall(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof Wall;\r\n    }\r\n\r\n    public boolean itIsFloor(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof Floor;\r\n    }\r\n\r\n    public boolean itIsSecretWall(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof SecretWall;\r\n    }\r\n\r\n    public boolean itIsWall(int x, int y){\r\n        if (levelMatrix[x][y].getBlock() == null) return false;\r\n        return levelMatrix[x][y].getBlock() instanceof Wall;\r\n    }\r\n\r\n    public boolean itIsChest(int x, int y){\r\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\r\n        return levelMatrix[x][y].getHarmlessObject() instanceof Chest;\r\n    }\r\n\r\n    public boolean itIsDiamond(int x, int y){\r\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\r\n        return levelMatrix[x][y].getHarmlessObject() instanceof Diamond;\r\n    }\r\n\r\n    public boolean itIsTumbleweed(int x, int y){\r\n        if (levelMatrix[x][y].getHarmlessObject() == null) return false;\r\n        return levelMatrix[x][y].getHarmlessObject() instanceof Tumbleweed;\r\n    }\r\n\r\n    public boolean itIsFireTrap(int x, int y){\r\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\r\n        return levelMatrix[x][y].getTrapObject() instanceof FireTrap;\r\n    }\r\n\r\n    public boolean itIsRock(int x, int y){\r\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\r\n        return levelMatrix[x][y].getTrapObject() instanceof Rock;\r\n    }\r\n\r\n    public boolean itIsScrpion(int x, int y){\r\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\r\n        return levelMatrix[x][y].getTrapObject() instanceof Scorpion;\r\n    }\r\n\r\n    public boolean itIsSnake(int x, int y){\r\n        if (levelMatrix[x][y].getTrapObject() == null) return false;\r\n        return levelMatrix[x][y].getTrapObject() instanceof Snake;\r\n    }\r\n\r\n    @Override\r\n    public void keyReleased(KeyEvent e) {\r\n\r\n    }\r\n\r\n    public Level getCurrentLevel() {\r\n        return currentLevel;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/source/PlayPanel.java	(revision 6033ba49874cf017494b7781317c46b6c9565d96)
+++ src/source/PlayPanel.java	(date 1590488147234)
@@ -382,7 +382,13 @@
                 setMovementUp();
                 boy.whatMove = 1;
                 boy.isMoving = true;
-            }else if (!block.pass() || itIsRock(boy.xInArray, boy.yInArray-1)){
+            }
+            else if (itIsRock(boy.xInArray, boy.yInArray-1)){
+                boy.whatMove = 10;
+                //take energy
+                boy.isMoving = true;
+            }
+            else if (!block.pass()){
                 boy.whatMove = 19;
                 boy.isMoving = true;
                 boy.yInArray++;
@@ -418,8 +424,18 @@
                 boy.isMoving = true;
             }
             else if (itIsRock(boy.xInArray - 1, boy.yInArray)){
-                boy.whatMove = 5;
-                boy.isMoving = true;
+                if (itIsClearForStone(boy.xInArray - 2, boy.yInArray)){
+                    boy.whatMove = 5;
+                    boy.isMoving = true;
+                    Rock rock = (Rock)levelMatrix[boy.xInArray - 1][boy.yInArray].getTrapObject();
+                    rock.whatMove = 5;
+                    rock.isMoving = true;
+                    rock.moveRock();
+                }
+                else{
+                    boy.whatMove = 6;
+                    boy.isMoving = true;
+                }
             }
             else if (!block.pass()){
                 boy.whatMove = 21;
@@ -439,13 +455,23 @@
             else if ((block.pass()&&!(itIsRock(boy.xInArray + 1, boy.yInArray)))||itIsHarmless(boy.xInArray + 1, boy.yInArray)){
                 setMovementRight();
                 boy.whatMove = 4;
-                //if stone is left boy.whatMove = 5;
+                //if stone is right boy.whatMove = 7;
                 //if wall is left boy.whatMove = 6;
                 boy.isMoving = true;
             }
             else if (itIsRock(boy.xInArray + 1, boy.yInArray)){
-                boy.whatMove = 7;
-                boy.isMoving = true;
+                if (itIsClearForStone(boy.xInArray + 2, boy.yInArray)){
+                    boy.whatMove = 7;
+                    boy.isMoving = true;
+                    Rock rock = (Rock)levelMatrix[boy.xInArray + 1][boy.yInArray].getTrapObject();
+                    rock.whatMove = 6;
+                    rock.isMoving = true;
+                    rock.moveRock();
+                }
+                else{
+                    boy.whatMove = 8;
+                    boy.isMoving = true;
+                }
             }
             else if (!block.pass()){
                 boy.whatMove = 22;
@@ -494,6 +520,11 @@
         }
     }
 
+    public boolean itIsClearForStone(int x, int y){
+        return (!itIsTrap(x, y) && !itIsHarmless(x, y)
+                && (itIsFloor(x, y) || itIsSecretWall(x, y)));
+        }
+
     public boolean itIsHarmless(int x, int y){
         return (levelMatrix[x][y].getHarmlessObject() != null);
     }
@@ -557,7 +588,7 @@
         return levelMatrix[x][y].getTrapObject() instanceof Rock;
     }
 
-    public boolean itIsScrpion(int x, int y){
+    public boolean itIsScorpion(int x, int y){
         if (levelMatrix[x][y].getTrapObject() == null) return false;
         return levelMatrix[x][y].getTrapObject() instanceof Scorpion;
     }
